{"version":3,"sources":["webpack:///./src/components/AppRipple.jsx","webpack:///./src/components/AppButton.jsx","webpack:///./src/components/AppIcon.jsx","webpack:///./src/modules/data/components/GroupCard.jsx","webpack:///./src/utils/collection.js","webpack:///./src/utils/reducers.js","webpack:///./src/utils/validation.js","webpack:///./src/store/dataframe.js","webpack:///./src/store/data-store.js","webpack:///./src/modules/data/pages/DataView.jsx","webpack:///./src/modules/data/DataRoutes.jsx","webpack:///./src/modules/data/layout/DataLayout.jsx","webpack:///./src/modules/data/DataHome.jsx","webpack:///./src/modules/plotly/components/PlotlyPlot.jsx","webpack:///./src/modules/plotly/components/PlotCaption.jsx","webpack:///./src/utils/plotsHelper.js","webpack:///./src/store/plot-store.js","webpack:///./src/modules/plotly/pages/PlotsView.jsx","webpack:///./src/modules/plotly/PlotsRoutes.jsx","webpack:///./src/modules/plotly/layout/PlotsLayout.jsx","webpack:///./src/modules/plotly/PlotsHome.jsx","webpack:///./src/components/AppOverlay.jsx","webpack:///./src/components/AppModal2.jsx","webpack:///./src/components/BaseInput.jsx","webpack:///./src/components/AppNumber.jsx","webpack:///./src/components/AppSelect.jsx","webpack:///./src/components/AppText.jsx","webpack:///./src/modules/tools/components/GeneDetails.jsx","webpack:///./src/modules/tools/pages/GeneBrowser.jsx","webpack:///./src/utils/string.js","webpack:///./src/modules/tools/pages/ToolsHome.jsx","webpack:///./src/modules/tools/ToolsRoutes.jsx","webpack:///./src/modules/tools/ToolsModule.jsx","webpack:///./src/App.routes.jsx","webpack:///./src/components/AppFile.jsx","webpack:///./src/components/AppSwitch.jsx","webpack:///./src/components/AppSpinner.jsx","webpack:///./src/utils/parser.js","webpack:///./src/store/settings.js","webpack:///./src/modules/data/components/GroupForm.jsx","webpack:///./src/modules/data/components/TableForm.jsx","webpack:///./src/modules/data/components/InfoForm.jsx","webpack:///./src/components/AppDatalist.jsx","webpack:///./src/modules/plotly/components/PlotsForm.jsx","webpack:///./src/layout/TopBar.jsx","webpack:///./src/components/AppAnchor.jsx","webpack:///./src/layout/NavigationItem.jsx","webpack:///./src/utils/importer.js","webpack:///./src/layout/Navigation.jsx","webpack:///./src/layout/AppLayout.jsx","webpack:///./src/utils/fetch.js","webpack:///./src/assets/svg/hero-icons.svg","webpack:///./src/App.jsx","webpack:///./src/index.jsx"],"names":["Ripple","duration","color","useState","rippleArray","setRippleArray","rippleCount","cleanUpFunction","useLayoutEffect","bounce","clearTimeout","setTimeout","useDebouncedRippleCleanUp","length","onMouseDown","event","rippleContainer","currentTarget","getBoundingClientRect","size","width","height","newRipple","x","pageX","window","scrollX","y","pageY","scrollY","className","map","ripple","index","key","style","top","left","backgroundColor","AppButton","props","buttonProps","children","disabled","AppIcon","this","xlinkHref","file","id","React","Component","GroupCardStat","label","value","GroupCard","group","name","sampleCount","replicateCount","mapFromArrays","keys","values","reduce","set","Map","buildTreeBranches","tree","branch","node","shift","Object","Dataframe","header","rows","config","multiHeader","makeAutoObservable","table","assign","rowName","groupBy","console","error","memory","obj","count","headerSlice","split","slice","join","refKey","has","get","push","splitGroups","columns","groups","row","column","i","sample","rowNames","separator","forEach","cellValue","warn","colName","matches","colNames","result","colHeader","includes","cols","filter","entries","newRows","newRow","cell","dataframeAsString","Array","from","log","dataTable","infoTable","DataView","observer","onCardDeleteClick","groupName","removeColumn","state","showGroup","dataStats","onClick","headerObject","sum","replicates","AppRoutes","path","useRouteMatch","exact","component","HomeLayout","DataHome","Plotly","Plot","createPlotlyComponent","PlotContext","createContext","hoveredGene","PlotlyPlot","onPlotHover","plotObject","points","plot","accessions","fullData","setState","onPlotUnhover","resizeObserver","ResizeObserver","entry","Plots","resize","target","observe","el","unobserve","Provider","onHover","onUnhover","ref","PlotCaption","Consumer","accession","borderColor","caption","potatoSampleOrder","colors","lineStyles","markerStyles","getDefaultLayout","showlegend","countUnit","plotTitle","title","text","font","family","legend","orientation","yaxis","hoverformat","xaxis","tickangle","dtick","colorway","singleGeneGroupedPlot","accessionIds","options","accessionId","data","createGroupedPlotFromGene","getRowAsTree","layout","showCaption","plotId","plotData","line","showOnlyFirstLegend","type","plotType","groupIndex","traceName","error_y","sampleName","mean","deviation","createTrace","marker","array","visible","plotStore","plots","_image","image","findIndex","splice","getRowAsGroups","multiGeneBarPlot","multiGeneIndCurvesPlot","colorIndex","styleIndex","dash","symbol","colorBy","stackedLinePlot","nanoid","addBarPlot","addIndivualCurvesPlot","addStackedCurvePlot","responsive","toImageButtonOptions","format","displaylogo","modeBarButtonsToAdd","icon","click","deletePlot","PlotsView","getRowAsMap","PlotsLayout","src","AppOverlay","defaultContainerClass","overlayClass","AppModal","showModal","hideModal","AppInput","onInputFocus","focus","onFocus","onInputBlur","onBlur","hover","onMouseEnter","onMouseLeave","labelPosition","htmlFor","AppText","placeholder","max","min","required","step","onChange","AppSelect","selectProps","setFocus","setHover","opt","onKeyDown","GeneDetails","geneCounts","replicate","GeneBrowser","computeGeneView","regexp","RegExp","searchId","replace","matchingResults","accessionMatch","search","geneInfo","infoMatch","some","field","countView","parseInt","start","pageOffset","end","geneView","pageMax","Math","ceil","onDisplayCountSelect","onGeneSearchSubmit","onPageOffsetChange","selectGene","selectedGene","selectedGeneCounts","disposeGeneViewListener","autorun","prevProps","prevState","onDoubleClick","ToolsHome","ToolsRoutes","PlotsHome","ToolsModule","AppFile","inputProps","AppSwitch","toggleSwitch","switchValue","checked","AppSpinner","xmlns","viewBox","fill","cx","cy","r","stroke","strokeWidth","d","readFile","a","reader","FileReader","readAsText","Promise","resolve","reject","onload","onerror","readTable","lines","fieldSeparator","rowNameColumn","headerSeparator","acc","settings","preloaded","_PRELOADED","info","_tableSettings","_isPreloading","tableSettings","hasData","process","GroupView","onUploadTablesClick","preventDefault","loading","loadCountUnit","loadTableSettings","unit","files","accessionColumn","rowCells","countColumn","loadFromObject","addColumn","onSave","onHeaderSwitchClick","onCancelButtonClick","cancel","onCancel","xTickValue","multiple","TableForm","onCountUnitSelect","onFieldSeparatorChange","onHeaderSeparatorChange","onFormSubmit","validTypes","onloadend","InfoForm","AppDatalist","setContainerRef","dataListContainerRef","onListItemClick","option","onSelect","onAppTextChange","onAppTextFocus","onAppTextBlur","containerWidth","noItemsMessage","clientWidth","PlotsForm","searchAccessionIds","validForm","accessionIdsView","onAccessionDataListChange","onAccessionDatalistIconClick","action","_","onPlotGeneButtonClick","addPlot","onPlotTitleChange","onSelectPlotTypeChange","onSelectColorByChange","isLast","Navbar","onToggle","show","to","brand","AppAnchor","rel","NavLink","aria-disabled","NavMenu","menuType","anchor","button","MenuComponent","NavGroup","importer","ab1","ab2","workbook_metadata","XLSX","read","Uint8Array","SheetNames","worksheet_metadata","Sheets","workbook_data","worksheet_data","original_column_names","col","cell_address","c","cell_ref","utils","encode_cell","v","dict","key_address","key_ref","genotype_address","genotype_ref","treatment_address","treatment_ref","leaf_number_address","leaf_number_ref","leaf_position_address","leaf_position_ref","date_treatment","date_treatment_ref","date_observation","date_observation_ref","replicate_address","replicate_ref","date_difference","new_column_names","sorted_header","sort","sorted_rows","row_id","sorted_row","indexOf","AppNavigation","changeRoute","route","location","pathname","history","onUploadReplicateTableClick","showGroupModal","onUploadExpressionTableClick","showTableModal","onUploadInfoMenuClick","showInfoModal","onExportDataMenuClick","expression","dataFrametoString","expression_field_sep","info_field_sep","zip","JSZip","JSON","stringify","base64","generateAsync","then","content","saveAs","onImportDataMenuClick","item","loadAsync","zipImport","Error","async","expressionTable","expression_header_sep","infoFile","imageFile","imgsrc","loadImage","onImportPotatoDataMenuClick","url_data","proxy","fetch","method","res1","arrayBuffer","res2","onClearDataMenuClick","clearData","onClearPlotsMenuClick","clearPlots","onClearImageMenuClick","clearImage","onNewImageMenuClick","readAsDataURL","onNewPlotMenuClick","showPlotsModal","exportUrl","isPreloading","accept","hasPlots","hasImage","href","withRouter","AppLayout","onTopBarToggle","showNav","onNavigationClick","onShowGroupModal","onShowPlotsModal","onShowTableModal","onShowInfoModal","onGroupFormModalHide","onGroupFormCancel","onGroupFormSave","onPlotFormModalHide","onPlotFormCancel","onTableFormModalHide","onTableFormCancel","onTableFormSave","onInfoFormModalHide","onInfoFormCancel","onInfoFormSave","Navigation","fetchResource","logError","response","ok","payload","blob","json","url","App","settingsResponse","dataResponse","infoResponse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"main.64ad2dc5b859a63fc4fe.js","sourcesContent":["import React, { useState, useLayoutEffect } from 'react';\n\n\n/**\n * Clear the ripple from the DOM after the animation is complete.\n * @param {number} rippleCount active ripples in the DOM\n * @param {number} duration ripple duration\n * @param {function} cleanUpFunction callback that removes all ripples\n */\nconst useDebouncedRippleCleanUp = (\n  rippleCount, duration, cleanUpFunction\n) => useLayoutEffect(() => {\n\n  let bounce = null;\n\n  if (rippleCount > 0) {\n\n    clearTimeout(bounce);\n\n    bounce = setTimeout(() => {\n\n      cleanUpFunction();\n      clearTimeout(bounce);\n\n    }, duration * 4);\n  }\n\n  return () => clearTimeout(bounce);\n\n}, [ rippleCount, duration, cleanUpFunction ]);\n\n\nexport default function Ripple ({ duration = 100, color = '#e2e8f0' }) {\n\n  const [ rippleArray, setRippleArray ] = useState([]);\n\n  useDebouncedRippleCleanUp(rippleArray.length, duration, () => setRippleArray([]));\n\n  /**\n   * Add a ripple object to the array\n   * @param {MouseEvent} event mouse-down event\n   */\n  const addRipple = event => {\n\n    // Get the ripple container dimensions\n    const rippleContainer = event.currentTarget.getBoundingClientRect();\n\n    const size = rippleContainer.width > rippleContainer.height\n      ? rippleContainer.width\n      : rippleContainer.height;\n\n    // Create the ripple at the mouse-event origin coordinates\n    const x = event.pageX - rippleContainer.x - size / 2 - window.scrollX;\n    const y = event.pageY - rippleContainer.y - size / 2 - window.scrollY;\n\n    const newRipple = { x, y, size };\n\n    // Add the ripple object to the state\n    setRippleArray([...rippleArray, newRipple]);\n  };\n\n  return (\n    <div\n      duration={duration}\n      color={color}\n      onMouseDown={addRipple}\n      className=\"absolute inset-0\"\n    >\n      {\n        rippleArray.map((ripple, index) =>\n          <span\n            className='absolute opacity-75 rounded-full ripple-anim'\n            key={'span' + index}\n            style={{\n              top: ripple.y,\n              left: ripple.x,\n              width: ripple.size,\n              height: ripple.size,\n              backgroundColor: color\n            }}\n          />\n        )\n      }\n    </div>\n  );\n}\n","import React from 'react';\n\nimport AppRipple from './AppRipple';\n\nexport default function AppButton (props) {\n\n  const { className, ...buttonProps } = props;\n\n  return (\n    <button\n      className={\n        `relative overflow-hidden cursor-pointer\n         flex items-center\n         rounded focus:outline-none\n         font-medium uppercase\n         ${className}`\n      }\n      { ...buttonProps }\n    >\n\n      { props.children }\n\n      {\n        props.disabled ||\n        <AppRipple />\n      }\n\n    </button>\n  );\n}","import React from 'react';\n\n\nexport default class AppIcon extends React.Component {\n\n  render () {\n    return (\n      <svg { ...this.props } >\n        <use xlinkHref={ `${this.props.file}.svg#${this.props.file}_${this.props.id}` } />\n      </svg>\n    );\n  }\n}\n","import React from 'react';\n\n\nconst GroupCardStat = (props) => {\n\n  const { label, value } = props;\n\n  return (\n    <div className={`flex mt-1 text-sm ${props.className}`}>\n      <span className=\"text-gray-700 font-bold\">{ label }</span>\n      <span className=\"ml-1 text-gray-800\">{ value }</span>\n    </div>\n  );\n};\n\nexport default class GroupCard extends React.Component {\n\n  constructor () {\n    super();\n  }\n\n  render () {\n    return (\n      <div className={\n        `flex items-center p-6 shadow-lg bg-white ${this.props.className}`\n      }>\n\n        <div className=\"w-full\" >\n\n          <h2 className=\"text-lg text-gray-800\">{ this.props.group.name }</h2>\n\n          <div className=\"sm:flex mt-2\" >\n            {/* <GroupItemStat label=\"Units:\" value={ this.props.group.countUnit } /> */}\n            <GroupCardStat\n              className=\"sm:ml-4\"\n              label=\"Samples:\"\n              value={ this.props.group.sampleCount }\n            />\n            <GroupCardStat\n              className=\"sm:ml-4\"\n              label=\"Replicates:\"\n              value={ this.props.group.replicateCount }\n            />\n          </div>\n\n        </div>\n\n        <div\n          className=\"inline-flex items-center text-gray-500\"\n        >\n          { this.props.children }\n        </div>\n\n\n      </div>\n    );\n  }\n}\n","/**\n *\n * @param {string} keys array of object keys\n * @param {any} values array of object values\n * @return {Map<string, string>|Map<string[],string>}\n */\nexport function mapFromArrays (keys, values) {\n  return keys.reduce((map, key, index) => map.set(key, values[index]), new Map());\n}\n\n/**\n * Returns a new array range\n * @param {number} start  Number where the range should start\n * @param {number} length Amount of numbers to create (sign determines direction)\n */\nexport function range (start, length) {\n  const sign = Math.sign(length);\n  return Array.from({ length: Math.abs(length) }, (_, i) => start + (i * sign));\n}\n","import { isEmptyObject } from './validation';\n\n/**\n * Recursive reducer that builds a tree-like object from a two-dimensional array.\n *\n * - Each child array is assumed to be a branch of the tree.\n * - Overlapping branches are supported.\n * - Each node in the tree is an object with an arbitrary number of child nodes.\n * - The final layer of nodes in the tree will be an array.\n * - Uniqueness of the final layer is not enforced.\n *\n * @param {Object<string,any>} tree\n * @param {string[]} branch\n */\nexport function buildTreeBranches (tree, branch) {\n\n  const node = branch.shift();\n\n  /**\n   * (Tail) The last node in the branch. It is\n   * always returned with an array value.\n   */\n  if (branch.length === 1) {\n    if (isEmptyObject(tree) || !tree[node]) tree[node] = branch;\n    else tree[node] = [ ...tree[node], ...branch ];\n    return tree;\n  }\n\n  /**\n   * (Head) The first node of the recursively passed\n   * tree. It is always an empty object, to be populated\n   * recursively.\n   */\n  if (!tree[node]) tree[node] = {};\n\n  /**\n   * Build the current head with the subtree returned\n   * from the recursive function.\n   */\n  tree[node] = buildTreeBranches(tree[node], branch);\n  return tree;\n\n}","/**\n * Check whether the unknown object is:\n * - empty object\n * - empty array\n * - empty string\n * - NaN\n * @param {unknown} x unknown object\n */\nexport function isEmptyObject (x) {\n  return typeof x === 'object' && Object.keys(x).length === 0;\n}\n\n/**\n * Check wether the array object is empty.\n * @param {any[]} array array of values\n */\nexport function isEmptyArray (array) {\n  return array.length === 0;\n}\n","import { makeAutoObservable } from 'mobx';\nimport { mapFromArrays } from '@/utils/collection';\nimport { buildTreeBranches } from '@/utils/reducers';\n\n/**\n * @typedef  {Object<string, string[]>} Row table row\n**/\n\n/**\n * @typedef  {Object} TableObject In-memory representation of a parsed table\n * @property {string[]}   header array of column names\n * @property {Row[]}        rows array of row objects\n**/\n\nexport class Dataframe {\n\n  /** @type {string[]} */\n  header = [];\n\n  /** @type {Row} */\n  rows = {};\n\n  /**\n   * @typedef  {Object} DataframeConfig Dataframe class options\n   * @property {string} multiHeader separator for tree-like headers\n  **/\n  config = {\n    multiHeader: ''\n  }\n\n  constructor () {\n    makeAutoObservable(this);\n  }\n\n  /**\n   * Load the dataframe with an already parsed table.\n   * @param {TableObject}     table\n   * @param {DataframeConfig} config\n   */\n  loadFromObject (table, config) {\n    Object.assign(this.config, config);\n    this.header = table.header;\n    this.rows = table.rows;\n  }\n\n  /* COMPUTED */\n\n  get rowNames () {\n    return Object.keys(this.rows);\n  }\n\n  get colNames () {\n    return [ ...this.header ];\n  }\n\n  get colGroups () {\n    return this.header.map(groups => groups.split(this.config.multiHeader));\n  }\n\n  /**\n   * @return {Object<string,Object<string,string>}\n   */\n  get headerObject () {\n    const branches = Array.from(this.colNames.map(name => name.split(this.config.multiHeader)));\n    const tree = branches.reduce(buildTreeBranches, {});\n    console.log(tree);\n    return tree;\n  }\n\n  get hasData () {\n    return this.colNames.length > 0;\n  }\n\n  /* QUERIES */\n\n  /**\n   * Get a single row as an array of values.\n   * @param {string} rowName unique row name\n   */\n  getRow (rowName) {\n    return this.rows[rowName];\n  }\n\n  /**\n   * In multi-header configurations, return the cells of a single row grouped\n   * by a subset of their respective headers. The returned object is a custom\n   * Map of array_key-array_value pairs.\n   *\n   * - Each key is an array with the composite column header group elements.\n   * - Each value is an array of cell values under that header group.\n   *\n   * @param {string} rowName unique row name\n   * @param {number} groupBy sub-header index\n   */\n  getRowAsGroups (rowName, groupBy) {\n\n    if (!this.config.multiHeader) {\n      console.error(\n        'The groupBy option of getRow is only supported in multi-header dataframes'\n      );\n      return null;\n    }\n\n    const memory = {};\n\n    return this.rows[rowName].reduce((obj, count, index) => {\n\n      const headerSlice = this.header[index]\n        .split(this.config.multiHeader)\n        .slice(0, groupBy+1)\n        .join(this.config.multiHeader);\n\n      if (!memory[headerSlice])\n        memory[headerSlice] = headerSlice.split('*');\n\n      const refKey = memory[headerSlice];\n\n      if (!obj.has(refKey)) obj.set(refKey, []);\n\n      obj.get(memory[headerSlice]).push(count);\n\n      return obj;\n\n    }, new Map());\n  }\n\n  /**\n   * Get a single row as an object of key-value pairs.\n   *\n   * - Each key represents the column header for a single cell value.\n   * - Each value represents the value of the cell.\n   *\n   * @param {String} rowName unique row name\n   */\n  getRowAsMap (rowName, splitGroups = false) {\n    const columns = splitGroups\n      ? this.header.map(groups => groups.split(this.config.multiHeader))\n      : this.header;\n    return mapFromArrays(columns, this.rows[rowName]);\n  }\n\n  /**\n   *\n   * @param {String} rowName unique row key\n   * @returns {object} tree-like object mapping the multi-index levels to the row\n   */\n  getRowAsTree (rowName) {\n    const row = this.rows[rowName];\n    return this.header.reduce((tree,column,i) => {\n      let split = column.split(this.config.multiHeader);\n      let group = split[0];\n      let sample = split[1];\n      tree[group]\n        ? (tree[group][sample]\n          ? tree[group][sample].push(row[i])\n          : tree[group][sample] = [row[i]])\n        : tree[group] = {[sample]:[row[i]]};\n      return tree;\n    }, {});\n  }\n\n  /**\n   * Get multiple rows from the dataframe\n   * @param {array} rowNames unique row name\n   * @returns {object} returns the specified rows.\n   */\n  getRows (rowNames) {\n    return rowNames.reduce((obj, rowName) => ({ ...obj, [rowName]: this.rows[rowName] }), {});\n  }\n\n  /**\n   *\n   * @param {Number} index\n   * @param {String} separator\n   */\n  getColumnByIndex (index, separator) {\n    return this.header[index].split(separator);\n  }\n\n  /* MUTATIONS */\n\n  /**\n   *\n   * @param {string} header\n   * @param {[string,string][]} rows\n   */\n  addColumn (header, rows) {\n\n    // Append new column header\n    this.header.push(header);\n\n    // Append cell values to each row\n    rows.forEach(([ rowName, cellValue ]) => {\n\n      if (!this.rows[rowName]) {\n        console.warn(`${rowName} is not a known gene accession`);\n        return;\n      }\n\n      this.rows[rowName].push(cellValue);\n    });\n  }\n\n  /**\n   *\n   * @param {String} rowName\n   * @param {any[]} row\n   */\n  addRow (rowName, row){\n    this.rows[rowName] = row;\n  }\n\n  clearData () {\n    this.header = [];\n    this.rows = {};\n  }\n\n  removeColumn (colName) {\n\n    /**\n     * Match the provided column name to an index in the dataframe header.\n     * In multi-column dataframes, this can return multiple indexes.\n     */\n    const matches = this.colNames\n      .reduce((result, colHeader, index ) => {\n\n        // In a multi-header dataframe, the header is an array of headers\n        if (this.config.multiHeader)\n          colHeader = colHeader.split(this.config.multiHeader);\n\n        if (colHeader.includes(colName)) result.push(index);\n\n        return result;\n\n      }, []);\n\n    // Compose a new header array, without the matching columns\n    const cols = this.colNames.filter((name, index) => !matches.includes(index));\n\n    // Compose a new rows object, without the matching columns\n    const rows = Object.entries(this.rows).reduce((newRows, [ rowName, rowValues]) => {\n      const newRow = rowValues.filter((cell, index) => !matches.includes(index));\n      newRows[rowName] = newRow;\n      return newRows;\n    }, {});\n\n    this.header = cols;\n    this.rows = rows;\n\n  }\n\n  dataFrametoString (separator) {\n    let dataframeAsString = 'Gene-ID' + separator;\n\n    dataframeAsString += this.header.join(separator);\n    dataframeAsString += '\\n';\n\n    Object.keys(this.rows).forEach(rowName => {\n      dataframeAsString += rowName + separator;\n      dataframeAsString += this.rows[rowName].join(separator);\n      dataframeAsString += '\\n';\n    });\n\n    return dataframeAsString;\n  }\n\n}\n","import { Dataframe } from './dataframe';\n\nexport const dataTable = new Dataframe();\nexport const infoTable = new Dataframe();\n","import React        from 'react';\nimport { observer } from 'mobx-react';\n\nimport AppButton from '@components/AppButton';\nimport AppIcon   from '@components/AppIcon';\nimport GroupCard from '../components/GroupCard';\n\nimport { dataTable } from '@/store/data-store';\n\n\n@observer\nexport default class DataView extends React.Component {\n\n  constructor () {\n    super();\n    this.state = {\n      showGroup: false,\n    };\n  }\n\n  /* AUXILIARY */\n\n  get dataStats () {\n    return Object.entries(dataTable.headerObject).map(([ groupName, sample ]) => {\n      return {\n        name: groupName,\n        sampleCount: Object.keys(sample).length,\n        replicateCount: Object.values(sample).reduce((sum,replicates) => sum+=replicates.length,0)\n      };\n    });\n  }\n\n  /* ACTIONS */\n\n  onCardDeleteClick = (groupName) => {\n    dataTable.removeColumn(groupName);\n  }\n\n  render () {\n    return (\n      <div className={ `relative w-full ${this.props.className || ''}` }>\n\n        {\n          this.dataStats.map((group, index) => (\n\n            <GroupCard\n              className=\"mt-6 first:mt-0\"\n              key={ `${group.name}-${index}`}\n              group={ group }\n            >\n              {\n                <AppButton\n                  className=\"group p-1 rounded-full\"\n                  onClick={ () => this.onCardDeleteClick(group.name) }\n                >\n                  <AppIcon\n                    file=\"hero-icons\"\n                    id=\"trash\"\n                    className=\"w-6 h-6 group-hover:text-pink-700\"\n                  />\n                </AppButton>\n              }\n\n            </GroupCard>\n\n          ))\n        }\n\n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\n\nimport DataView   from './pages/DataView';\n// import GroupView  from './pages/GroupView';\n// import SampleView from './pages/SampleView';\n\nexport default function AppRoutes() {\n\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route exact path={ path } component={ DataView } />\n      {/* We might need this when providing group, sample, and replicate editing functionality */}\n      {/* <Route path={ `${path}/group/:groupIndex/sample/:sampleIndex?` } component={ SampleView } />\n      <Route path={ `${path}/group/:groupIndex?` } component={ GroupView } /> */}\n    </Switch>\n  );\n}\n","import React from 'react';\n\n\nexport default class HomeLayout extends React.Component {\n\n  render () {\n\n    return (\n      <main className=\"flex justify-center mr-6 py-10 px-6 md:px-12 w-full\" >\n\n        { this.props.children }\n\n      </main>\n    );\n  }\n}","import React  from 'react';\nimport Routes from './DataRoutes';\n\nimport HomeLayout from './layout/DataLayout';\n\n\nexport default function DataHome () {\n\n  return (\n    <HomeLayout>\n      <Routes />\n    </HomeLayout>\n  );\n}","\nimport React, { createContext } from 'react';\nimport createPlotlyComponent from 'react-plotly.js/factory';\n\nconst Plotly = window.Plotly;\nconst Plot = createPlotlyComponent(Plotly);\n\nexport const PlotContext = createContext({ hoveredGene: '' });\n\nexport default class PlotlyPlot extends React.Component {\n\n  constructor () {\n    super();\n    this.state = {\n      name: ''\n    };\n  }\n\n  componentDidMount () {\n    this.resizeObserver = new ResizeObserver(entries => {\n      for (let entry of entries) {\n        window.Plotly.Plots.resize(entry.target);\n      }\n    });\n    this.resizeObserver.observe(this.plot.el);\n  }\n\n  componentWillUnmount () {\n    this.resizeObserver.unobserve(this.plot.el);\n  }\n\n  onPlotHover = (plotObject) => {\n    const { points } = plotObject;\n    if (points.length !== 1 || this.props.plot.accessions.length <= 1) return;\n    const name = points[0].fullData.name;\n    this.setState({ name });\n  }\n\n  onPlotUnhover = () => {\n    this.setState({ name: '' });\n  }\n\n  render () {\n    return (\n      <PlotContext.Provider value={{ hoveredGene: this.state.name }}>\n        <figure className={this.props.className} >\n          <Plot\n            onHover={ this.onPlotHover }\n            onUnhover={ this.onPlotUnhover }\n            ref={ ref => this.plot = ref }\n            { ...this.props.plot }\n          />\n          <div className=\"flex flex-wrap gap-x-10 mx-20\">\n            { this.props.children }\n          </div>\n        </figure>\n      </PlotContext.Provider>\n    );\n  }\n}\n","import React from 'react';\n\nimport { PlotContext } from './PlotlyPlot';\n\nexport default class PlotCaption extends React.Component {\n  render() {\n    return (\n      <PlotContext.Consumer>\n        {\n          ({ hoveredGene }) => (\n            <figcaption\n              className={\n                `flex flex-col py-5 mt-2\n                 border-t-2 hover:border-yellow-600\n                 hover:bg-yellow-100\n                 ${hoveredGene && !hoveredGene.includes(this.props.accession) ? 'opacity-50' : ''}\n                 ${hoveredGene.includes(this.props.accession) ? 'bg-yellow-100' : ''}\n                 text-justify text-gray-800 text-sm`\n              }\n              style={{ borderColor: this.props.color ?? '' }}\n            >\n\n              <div\n                className=\"font-semibold text-base\"\n                style={{ color: this.props.color ?? '' }}\n              >\n                { this.props.accession }\n              </div>\n\n              <div className=\"flex items-center mt-2\">\n\n                <div>\n                  {\n                    [ ...this.props.caption.keys() ].map(colName => (\n                      <div\n                        key={ colName }\n                        className=\"ml-2 py-1 uppercase text-yellow-700\"\n                      >\n                        { colName }\n                      </div>\n                    ))\n                  }\n                </div>\n\n                <div>\n                  {\n                    [ ...this.props.caption.values() ].map((cellValue, index) => (\n                      <div key={ index } className=\"ml-5 py-1\">\n                        { cellValue }\n                      </div>\n                    ))\n                  }\n                </div>\n\n              </div>\n            </figcaption>\n          )\n        }\n      </PlotContext.Consumer>\n    );\n  }\n}\n","// import Plotly from 'plotly.js/lib/core';\nimport { dataTable } from '@/store/data-store';\nimport { mean, deviation } from 'd3';\n\nconst potatoSampleOrder = ['00','01','02','03','04','05','06','07','08','09','11'];\n\n/**\n * @typedef {import('../store/plot-store').PlotOptions} PlotOptions\n */\n\nexport const colors = ['#c7566f', '#57bf67', '#845ec9', '#90b83d', '#d3a333','#c363ab', '#4a7c38', '#adab63', '#698ccc', '#c94f32', '#826627', '#52b8a4', '#d88e61'];\n\nconst lineStyles = ['solid', 'dot', 'dash', 'longdash', 'dashdot', 'longdashdot'];\nconst markerStyles = ['circle','square','diamond', 'cross', 'triangle-up','pentagon'];\n\n\n/**\n *\n * @param {boolean} showlegend show the legend of the plot\n * @param {string} accessionId accessionId to plot the data for\n * @param {string} countUnit unit used for the y-label\n */\nfunction getDefaultLayout(showlegend, countUnit, plotTitle) {\n  return {\n    title: {\n      text: plotTitle,\n      font: {\n        family: 'ABeeZee',\n        size: 24\n      },\n      y: 0.9,\n    },\n    showlegend,\n    legend: {\n      orientation:'h',\n      x: 0,\n      y: -0.30,\n\n    },\n    yaxis: {\n      title:{\n        text: 'count [raw]' // access to the unit needs to be variable\n      },\n      hoverformat: '.2f'\n    },\n    xaxis: {\n      tickangle: 'auto',\n      dtick: 1\n    },\n    colorway: colors,\n  };\n}\n\n/**\n * create a single Gene grouped Plot. That can be either single-gene Bar or single-gene individual curves\n * @param {string[]} accessionIds\n * @param {PlotOptions} options\n */\nexport function singleGeneGroupedPlot(accessionIds, options) {\n  let accessionId = accessionIds[0];\n  let plotData = dataTable.getRowAsTree(accessionId);\n\n  let data = createGroupedPlotFromGene(plotData, accessionId, options);\n  let layout = getDefaultLayout(options.showlegend, options.countUnit, options.plotTitle);\n\n  return {data, layout, config: options.config, accessions: accessionIds, showCaption: options.showCaption, plotId: options.plotId};\n}\n\n\n/**\n * create a plotly multi gene bar plot\n * @param {string[]} accessionIds\n * @param {PlotOptions} options\n */\nexport function multiGeneBarPlot(accessionIds, options){\n  let data = [];\n  accessionIds.forEach(accession => {\n    let plotData = dataTable.getRowAsGroups(accession,1);\n    let x = [[],[]];\n    let y = [];\n    let error_y = [];\n    let groupIndex = 0;\n    let group = '';\n    plotData.forEach((value, key) => {\n\n      if (key[0] !== group) {\n        groupIndex++;\n      }\n      \n      group = key[0];\n\n      // x[0].push(key[0]);\n      x[0].push(`G${groupIndex}`);\n      x[1].push(key[1]);\n      y.push(mean(value));\n      error_y.push(deviation(value));\n    });\n    data.push(createTrace(x,y,error_y,accession, 'bar', options.showlegend));\n  });\n\n  let layout = getDefaultLayout(options.showlegend, options.countUnit, options.plotTitle);\n  return {data, layout, config: options.config, accessions: accessionIds, showCaption: options.showCaption, plotId: options.plotId};\n}\n\n/**\n * create a plolty multi Gene individual curves plot\n * @param {string[]} accessionIds\n * @param {PlotOptions} options\n */\nexport function multiGeneIndCurvesPlot(accessionIds, options) {\n  let data = [];\n  accessionIds.forEach((accession,index) => {\n    const plotData = dataTable.getRowAsTree(accession);\n    const line = {\n      color : colors[index],\n    };\n    // showLegendCurve = index > 0 ? false : true;\n    data.push(...createGroupedPlotFromGene(plotData, accession, options, line, true));\n\n  });\n\n  let layout = getDefaultLayout(options.showlegend, options.countUnit, options.plotTitle);\n  return {data, layout, config: options.config, accessions: accessionIds, showCaption: options.showCaption, plotId: options.plotId};\n}\n\n/**\n * create a plolty stacked line-plot\n * @param {string[]} accessionIds\n * @param {PlotOptions} options\n */\nexport function stackedLinePlot(accessionIds, options) {\n  let data = [];\n  let colorIndex = 0;\n  let styleIndex = 0;\n  let line = null;\n  let marker = null;\n  accessionIds.forEach(accession => {\n    let plotData = dataTable.getRowAsTree(accession);\n    Object.keys(plotData).forEach(groupName => {\n      let name = groupName;\n      let x = [];\n      let y = [];\n      let error_y = [];\n      if (accessionIds.length > 1) {\n        line = {\n          color: colors[colorIndex],\n          dash: lineStyles[styleIndex]\n        };\n        marker = {\n          symbol: markerStyles[styleIndex]\n        };\n        name = `${groupName} - ${accession}`;\n      }\n      options.colorBy === 'group' ? colorIndex++ : styleIndex++;\n      let sampleOrder = potatoSampleOrder.filter( x => Object.keys(plotData[groupName]).includes(x));\n      sampleOrder.forEach(sampleName => {\n        x.push(sampleName);\n        y.push(mean(plotData[groupName][sampleName]));\n        error_y.push(deviation(plotData[groupName][sampleName]));\n      });\n      data.push(createTrace(x,y,error_y, name, 'scatter', options.showlegend, line, marker));\n    });\n    options.colorBy === 'group' ? (colorIndex = 0, styleIndex++) : (colorIndex++, styleIndex = 0);\n  });\n\n  let layout = getDefaultLayout(options.showlegend, options.countUnit, options.plotTitle);\n  return {data, layout, config: options.config, accessions: accessionIds, showCaption: options.showCaption, plotId: options.plotId};\n}\n\n/**\n * creates one \"group\" of single-gene bar/individual-curves or multi-gene individual curves\n * @param {string[]} accessionIds\n * @param {PlotOptions} options\n */\nfunction createGroupedPlotFromGene(plotData, accessionId, options, line, showOnlyFirstLegend = false) {\n  let data = [];\n  let type = options.plotType === 'bars' ? 'bar' : 'scatter';\n  let groupIndex = 1;\n  Object.keys(plotData).forEach((groupName, index) => {\n    let traceName = showOnlyFirstLegend ? accessionId : groupName;\n    let x = [[],[]];\n    let y = [];\n    let error_y = [];\n    let sampleOrder = potatoSampleOrder.filter( x => Object.keys(plotData[groupName]).includes(x));\n    sampleOrder.forEach(sampleName => {\n      x[0].push(`G${groupIndex}`);\n      x[1].push(sampleName);\n      y.push(mean(plotData[groupName][sampleName]));\n      error_y.push(deviation(plotData[groupName][sampleName]));\n    });\n    groupIndex++;\n    let showlegend = showOnlyFirstLegend ? ( index > 0 ? false : true ) : true;\n    data.push(createTrace(x,y,error_y, traceName, type, showlegend, line));\n  });\n  return data;\n}\n\n/**\n * create a generic plotly trace\n * @param {array} x\n * @param {array} y\n * @param {array} error_y\n * @param {string} name\n * @param {string} type\n * @param {boolean} showlegend\n * @param {object} line\n * @param {object} marker\n */\nfunction createTrace(x, y, error_y, name, type, showlegend, line, marker) {\n  return {\n    x,\n    y,\n    error_y: {\n      type: 'data',\n      array: error_y,\n      visible: true\n    },\n    type,\n    name,\n    showlegend,\n    ...(line && {line}),\n    ...(marker && {marker})\n  };\n}","import {\n  makeAutoObservable,\n} from 'mobx';\n\nimport {\n  singleGeneGroupedPlot,\n  multiGeneIndCurvesPlot,\n  stackedLinePlot,\n  multiGeneBarPlot,\n} from '../utils/plotsHelper';\n\nimport { nanoid } from 'nanoid';\n\n\n/**\n *\n * @typedef  {Object}   PlotOptions\n * @property {boolean} showlegend\n * @property {boolean} showCaption\n * @property {string}  plotType\n * @property {string}  colorBy\n * @property {string}  plotTitle\n */\nclass PlotStore {\n\n  plots = [];\n  _image = null;\n\n  countUnit = null;\n\n  constructor () {\n    makeAutoObservable(this);\n  }\n\n  /* UNIT */\n\n  loadCountUnit(countUnit) {\n    this.countUnit = countUnit;\n  }\n\n  /* IMAGE */\n\n  get hasImage () {\n    return this.image ? true : false;\n  }\n\n  clearImage () {\n    this._image = null;\n  }\n\n  loadImage (image) {\n    this._image = image;\n  }\n\n  get image() {\n    return this._image;\n  }\n\n  /* PLOTS */\n\n  get hasPlots () {\n    return this.plots.length > 0;\n  }\n\n  /**\n   * Clear the plots array in the store.\n   */\n  clearPlots () {\n    this.plots = [];\n  }\n\n  /**\n   * Delete a plot from the store\n   * @param {number} index plot index in the store\n   */\n  deletePlot(plotId){\n    let index = this.plots.findIndex(plot => plot.plotId === plotId);\n    this.plots.splice(index,1);\n  }\n\n  /**\n   *\n   * @param {string[]} accessionIds\n   * @param {PlotOptions} options\n   */\n  addBarPlot(accessionIds, options) {\n\n    if (accessionIds.length === 1) this.plots.push(\n      singleGeneGroupedPlot(accessionIds, options)\n    );\n    else if (accessionIds.length > 1) this.plots.push(\n      multiGeneBarPlot(accessionIds, options)\n    );\n  }\n\n  /**\n   *\n   * @param {string[]} accessionIds\n   * @param {PlotOptions} options\n   */\n  addIndivualCurvesPlot(accessionIds, options) {\n    if (accessionIds.length === 1) this.plots.push(\n      singleGeneGroupedPlot(accessionIds, options)\n    );\n    else if (accessionIds.length > 1) this.plots.push(\n      multiGeneIndCurvesPlot(accessionIds, options)\n    );\n  }\n\n  /**\n   *\n   * @param {string[]} accessionIds\n   * @param {PlotOptions} options\n   */\n  addStackedCurvePlot(accessionIds, options) {\n    this.plots.push(\n      stackedLinePlot(accessionIds, options)\n    );\n  }\n\n  /**\n   * @param {Array} accessionIds\n   * @param {PlotOptions} options\n   */\n  addPlot(accessionIds, options){\n\n    options.countUnit = this.countUnit;\n\n    options.plotId = nanoid();\n    options.config = this.config(options.plotId);\n    switch (options.plotType) {\n      case 'bars':\n        this.addBarPlot(accessionIds, options);\n        break;\n      case 'individualCurves':\n        this.addIndivualCurvesPlot(accessionIds, options);\n        break;\n      case 'stackedCurves':\n        this.addStackedCurvePlot(accessionIds, options);\n        break;\n      default:\n        break;\n    }\n  }\n\n\n  /**\n   * constant config object for plotly\n   */\n  config(plotId) {\n    return {\n      responsive: true,\n      toImageButtonOptions: {\n        format: 'svg'\n      },\n      displaylogo: false,\n      modeBarButtonsToAdd: [\n        {\n          name: 'Delete plot',\n          icon: {\n            'width': 21,\n            'height': 21,\n            'path': 'M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z'\n          },\n          click: () => {\n            this.deletePlot(plotId);\n          }\n        }\n      ]\n    };\n  }\n}\n\nexport const plotStore = new PlotStore();","import React        from 'react';\nimport { observer } from 'mobx-react';\n\nimport PlotlyPlot  from '../components/PlotlyPlot';\nimport PlotCaption from '../components/PlotCaption';\n\nimport { plotStore } from '@/store/plot-store';\nimport { infoTable } from '@/store/data-store';\nimport { colors }    from '@/utils/plotsHelper';\n\n@observer\nexport default class PlotsView extends React.Component {\n\n  render() {\n    return (\n      plotStore.plots.map(plot => (\n        <PlotlyPlot\n          key={plot.plotId}\n          className=\"relative flex flex-col m-3 py-6 w-full resize-x\n                     shadow-outer overflow-auto bg-white\"\n          plot={{ ...plot }}\n        >\n          {\n            plot.showCaption &&\n            plot.accessions.map((accession, index) => (\n              <PlotCaption\n                key={ `accession-${index}` }\n                accession={ accession }\n                caption={ infoTable.getRowAsMap(accession) }\n                color={ plot.accessions.length > 1  ? colors[index] : null }\n              />\n            ))\n          }\n        </PlotlyPlot>\n      ))\n    );\n  }\n}\n","import React from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\n\nimport PlotsView from './pages/PlotsView';\n\n\nexport default function AppRoutes() {\n\n  const { path } = useRouteMatch();\n\n  return (\n    <Switch>\n      <Route exact path={ path } component={ PlotsView } />\n    </Switch>\n  );\n}\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { plotStore } from '@/store/plot-store';\n\n@observer\nexport default class PlotsLayout extends React.Component {\n  render() {\n    return (\n      <div className=\"flex flex-col xl:flex-row max-w-screen\">\n        {/* MAIN CONTENT: ROUTES */}\n\n        <main className=\"flex flex-wrap w-full\" >\n          {/* PRELOADED IMAGE\n\n            This <img/> element is pre-styled to integrate with the existing layout as\n            best as possible. To do this, we make some sensible assumptions about how the\n            image is most likely going to be displayed in relation to the plots.\n\n            - The layout in small screens (up to width: 768px) is a flex display with column\n            orientation. Each <Plot/> element will use the full width of the <main> container.\n\n            - The layout in large screens (width: 1440px) is a flex display with automatic\n             wrapping. Each <Plot/> element will use half of the <main> container width.\n\n            Considering the points above, the <img/> element is positioned as if it were another\n            <Plot/>, with a few differences:\n\n            - The image container is a <div/> element with a full width, and a padding percentage\n            base on that full width. This creates a fluid container that will resize along with\n            the screen width.\n\n            - The image container width is limited to a maximum size in screens up to laptop\n            size (width: 1280px). After that, the image width will always take up 50% of the\n            <main> element, like the plots.\n\n            These <img/> styles try to emulate the way Plotly.js renders <Plot/> elements, while\n            at same time keeping the image locked to an aspect ratio.\n\n            Source: https://tailwindcss.com/course/locking-images-to-a-fixed-aspect-ratio\n\n          */}\n          {plotStore.image && (\n            <div className=\"flex justify-center items-center m-3 w-full\n                            resize-x overflow-auto shadow-outer bg-white\"\n            >\n              <img src={plotStore.image} />\n            </div>\n          )}\n\n          {/* PLOTS */}\n          {this.props.children}\n        </main>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport Routes from './PlotsRoutes';\n\nimport HomeLayout from './layout/PlotsLayout';\n\n\nexport default function DataHome () {\n\n  return (\n    <HomeLayout>\n      <Routes />\n    </HomeLayout>\n  );\n}","import React from 'react';\n\n\nexport default class AppOverlay extends React.Component {\n\n  constructor () {\n    super();\n    this.defaultContainerClass = `\n    `;\n  }\n\n  render () {\n    return (\n      <>\n        {/* CONTAINER */}\n        <div\n          className=\"fixed z-40 inset-0\n                     flex justify-center items-center\n                     outline-none focus:outline-none\"\n        >\n\n          {/* CONTENT */}\n          <div className={ this.props.className } >\n\n            { this.props.children }\n\n          </div>\n\n        </div>\n\n        {/* OVERLAY */}\n        <div\n          className={ `opacity-25 fixed inset-0 z-30 ${this.props.overlayClass}` }\n          onClick={ this.props.onClick }\n        />\n\n      </>\n    );\n  }\n}","import React from 'react';\n\nimport AppButton  from './AppButton';\nimport AppIcon    from './AppIcon';\nimport AppOverlay from './AppOverlay';\n\nexport default class AppModal extends React.Component {\n\n  constructor () {\n    super();\n  }\n\n  render () {\n\n    return (\n      this.props.showModal &&\n      <AppOverlay\n        className={ `shadow-lg rounded-lg bg-white ${ this.props.className ?? '' }`}\n        overlayClass=\"bg-black\"\n        onClick={ this.props.hideModal }\n      >\n\n        {/* HEADER */}\n        <div\n          className=\"flex items-center justify-between p-6 rounded-t text-gray-800\"\n        >\n\n          <h2 className=\"uppercase w-full text-center text-base sm:text-xl md:text-2xl font-semibold\">\n            { this.props.title }\n          </h2>\n\n          <AppButton onClick={ this.props.hideModal } className=\"group\" >\n            <AppIcon file=\"hero-icons\" id=\"close\" className=\"w-6 h-6 group-hover:text-pink-700\" />\n          </AppButton>\n        </div>\n\n        {/* BODY */}\n        { this.props.children }\n\n      </AppOverlay>\n    );\n  }\n}","import React from 'react';\n\nexport default class AppInput extends React.Component {\n\n  constructor () {\n    super();\n    this.state = {\n      focus: false,\n      hover: false,\n    };\n  }\n\n  /**\n   * Set the focus state and call any passed callback\n   * @param {React.FormEvent<HTMLInputElement>} event\n   */\n  onInputFocus = (event) => {\n    this.setState({ focus: true });\n    if (this.props.onFocus)\n      this.props.onFocus(event);\n  }\n\n  /**\n   * Set the focus state and call any passed callback\n   * @param {React.FormEvent<HTMLInputElement>} event\n   */\n  onInputBlur = (event) => {\n    this.setState({ focus: false });\n    if (this.props.onBlur)\n      this.props.onBlur(event);\n  }\n\n  render () {\n\n    return (\n      <div\n        className={ this.props.className }\n        onMouseEnter={ () => this.setState({ hover: true }) }\n        onMouseLeave={ () => this.setState({ hover: false }) }\n      >\n\n        <input\n          { ...this.props }\n          className=\"py-3 px-4 w-full\n                     rounded border-2 border-gray-300\n                     hover:border-blue-500 focus:border-blue-600\n                     shadow-xs text-gray-800 text-sm\n                     focus:outline-none focus:bg-white\"\n          id={ this.props.label }\n          onBlur={ this.onInputBlur }\n          onFocus={ this.onInputFocus }\n        />\n\n        {\n          this.props.label && !this.props.labelPosition &&\n          <label\n            htmlFor={ this.props.label }\n            className={\n              `px-1 py-1 text-sm\n             ${ this.state.focus ? 'text-blue-600' : this.state.hover ? 'text-gray-800' : 'text-gray-600' }`\n            }\n          >\n            { this.props.label }\n          </label>\n        }\n\n      </div>\n    );\n  }\n}","import React from 'react';\nimport BaseInput from './BaseInput';\n\nexport default class AppText extends React.Component {\n  render () {\n    return (\n      <BaseInput\n        className={ this.props.className }\n        type=\"number\"\n        label={ this.props.label }\n        value={ this.props.value }\n        placeholder={ this.props.placeholder }\n        max={ this.props.max }\n        min={ this.props.min }\n        required={ this.props.required }\n        step={ this.props.step }\n        onBlur={ this.props.onBlur }\n        onChange={ this.props.onChange }\n        onClick={ this.props.onClick }\n        onFocus={ this.props.onFocus }\n      />\n    );\n  }\n}","import React, { useState } from 'react';\n\nexport default function AppSelect (props) {\n\n  const { className, options, ...selectProps } = props;\n\n  const [ focus, setFocus ] = useState(false);\n  const [ hover, setHover ] = useState(false);\n\n  return (\n    <div\n      className={ className }\n      onMouseEnter={ () => setHover(true) }\n      onMouseLeave={ () => setHover(false) }\n    >\n\n      <select\n        { ...selectProps }\n        id={ props.label || props.id }\n        className=\"py-3 px-4 w-full\n                   rounded border-2 border-gray-300\n                   hover:border-blue-500 focus:border-blue-600\n                   shadow-xs bg-white text-gray-800 text-sm\n                   focus:outline-none\"\n        onFocus={ () => setFocus(true) }\n        onBlur={ () => setFocus(false) }\n      >\n        {\n          options?.map((opt) =>\n            <option\n              key={ opt.value }\n              value={ opt.value }\n              disabled={ opt.disabled }\n            >\n              { opt.label ?? opt.value }\n            </option>\n          )\n        }\n      </select>\n\n      <label\n        htmlFor={ props.label || props.id }\n        className={\n          `px-1 py-1 text-sm\n           ${ focus ? 'text-blue-600' : hover ? 'text-gray-800' : 'text-gray-600' }`\n        }\n      >\n        { props.label }\n      </label>\n\n\n    </div>\n  );\n}","import React from 'react';\nimport BaseInput from './BaseInput';\n\nexport default class AppText extends React.Component {\n\n  render () {\n    return (\n      <BaseInput\n        className={ this.props.className }\n        type=\"text\"\n        label={ this.props.label }\n        value={ this.props.value }\n        placeholder={ this.props.placeholder }\n        onBlur={ this.props.onBlur }\n        onChange={ this.props.onChange }\n        onClick={ this.props.onClick }\n        onFocus={ this.props.onFocus }\n        onKeyDown={ this.props.onKeyDown }\n      />\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class GeneDetails extends Component {\n\n  render() {\n    return (\n      <div className=\"flex flex-col flex-auto overflow-hidden overflow-y-scroll\">\n        <div className=\"flex p-5 font-semibold bg-yellow-200 uppercase\">\n          <div className=\"px-5 w-2/6\">Group</div>\n          <div className=\"px-5 w-2/6\">Sample</div>\n          <div className=\"px-5 w-1/6 text-center\">Replicate</div>\n          <div className=\"px-5 w-1/6 text-center\">Count [raw]</div>\n        </div>\n        {\n          this.props.geneCounts.map(({ group, sample, replicate, count }) => (\n\n            <div\n              className=\"flex p-5 odd:bg-gray-100 hover:bg-yellow-100\"\n              key={ `${group}-${sample}-${replicate}` }\n            >\n              <div className=\"px-5 w-2/6\">{ group }</div>\n              <div className=\"px-5 w-2/6\">{ sample }</div>\n              <div className=\"px-5 w-1/6 text-center\">{ replicate }</div>\n              <div className=\"px-5 w-1/6 text-center\">{ count }</div>\n            </div>\n\n          ))\n        }\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nimport { autorun } from 'mobx';\nimport {\n  dataTable,\n  infoTable\n} from '@/store/data-store';\n\nimport { escapeRegExp }  from '@/utils/string';\n\nimport AppButton from '@/components/AppButton';\nimport AppIcon   from '@/components/AppIcon';\nimport AppModal  from '@/components/AppModal2';\nimport AppNumber from '@/components/AppNumber';\nimport AppSelect from '@/components/AppSelect';\nimport AppText   from '@/components/AppText';\n\nimport GeneDetails from '../components/GeneDetails';\n\nexport default class GeneBrowser extends Component {\n\n  constructor () {\n    super();\n    this.state = {\n      geneView: [],\n      searchId: '',\n      pageOffset: 1,\n      pageMax: 1,\n      countView: 20,\n      //\n      selectedGene: '',\n      selectedGeneCounts: [],\n    };\n  }\n\n  /* AUXILIARY */\n\n  computeGeneView = () => {\n\n    // Retrieve gene information matching the search parameters (empty search matches all)\n    const regexp = new RegExp( escapeRegExp(this.state.searchId), 'i' );\n    const matchingResults = dataTable.rowNames.reduce((matches, accession) => {\n\n      // Match text in the accessions ids\n      const accessionMatch = accession.search(regexp) > -1;\n\n      // Match text in the info fields\n      const geneInfo = infoTable.getRowAsMap(accession) ?? new Map();\n      const infoMatch = geneInfo\n        ? Array.from(geneInfo.values()).some(field => field.search(regexp) > -1)\n        : false;\n\n      // Include in the results if any matches are found\n      if (accessionMatch || infoMatch) matches.push({\n        accession,\n        geneInfo\n      });\n\n      return matches;\n\n    }, []);\n\n\n    // Calculate the current page view\n    const countView = parseInt(this.state.countView);\n    const start = (this.state.pageOffset-1) * countView;\n    const end = this.state.pageOffset * countView;\n    const geneView = matchingResults.slice(start, end);\n\n    // Calculate the number of pages according to the current display options\n    const pageMax = Math.ceil(matchingResults.length / this.state.countView) || 1;\n\n    this.setState(({ geneView, pageMax }));\n  }\n\n  /* LYFECYCLE */\n\n  componentDidMount () {\n    this.disposeGeneViewListener = autorun( this.computeGeneView );\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n\n    if( prevState.searchId !== this.state.searchId\n        || prevState.pageOffset !== this.state.pageOffset\n        || prevState.countView !== this.state.countView\n    ) {\n      this.computeGeneView();\n    }\n\n  }\n\n  componentWillUnmount () {\n    this.disposeGeneViewListener();\n  }\n\n  /* EVENTS */\n\n  /**\n   * Update the _countDisplay_ state property.\n   * @param {React.ChangeEvent<HTMLSelectElement>} event\n   */\n  onDisplayCountSelect = (event) => {\n    const countView = event.target.value;\n    this.setState({ countView });\n  }\n\n  /**\n   * Re-evaluate the captions result, including only accessions ids matching fully or\n   * partially the current _searchId_ state property. This event also re-calculates the\n   * _countOffset_ and _countView_ state properties.\n   * @param {React.KeyboardEvent} event\n   */\n  onGeneSearchSubmit = (event) => {\n    if (event.key === 'Enter') {\n      this.setState({ pageOffset: 1, searchId: event.target.value});\n    }\n  }\n\n  /**\n   * Update the _pageOffset_ state property.\n   * @param {React.ChangeEvent<HTMLInputElement} event\n   */\n  onPageOffsetChange = (event) => {\n\n    let pageOffset = event.target.value;\n\n    if (pageOffset <= 0 || pageOffset > this.state.pageMax) {\n      pageOffset = this.state.pageOffset;\n    }\n\n    this.setState({ pageOffset });\n\n  }\n\n  /* ACTIONS */\n\n  /**\n   * Toggle the gene details modal visibility.\n   * @param {React.MouseEvent<HTMLDivElement>} event\n   */\n  selectGene = (selectedGene) => {\n    let selectedGeneCounts;\n    if (selectedGene) {\n      const table = dataTable.getRowAsMap(selectedGene, true);\n      selectedGeneCounts = [ ...table.entries() ].map(([ [ group, sample, replicate ], count]) => ({\n        group,\n        sample,\n        replicate,\n        count\n      }));\n    }\n    this.setState({ selectedGene, selectedGeneCounts });\n  }\n\n  /* RENDER */\n\n  render() {\n    return (\n      <div className=\"m-6\">\n\n        <div className=\"mt-4 flex flex-col lg:flex-row bg-white px-6 py-5\">\n\n          <AppText\n            className=\"lg:w-3/4 w-full\"\n            id=\"gene-browser-search\"\n            label=\"Search accession\"\n            onKeyDown={ this.onGeneSearchSubmit }\n          />\n\n          <div className=\"flex flex-col flex-grow sm:flex-row\">\n            <AppNumber\n              className=\"w-full mt-4 sm:w-1/2 lg:ml-3 lg:mt-0\"\n              label={ `Page ${this.state.pageOffset}/${this.state.pageMax}`}\n              min={ 1 }\n              max={ this.state.pageMax }\n              required={ true }\n              value={ this.state.pageOffset }\n              onChange={ this.onPageOffsetChange }\n            />\n\n            <AppSelect\n              className=\"w-full mt-4 sm:ml-3 sm:w-1/2 lg:mt-0\"\n              id=\"gene-browser-search\"\n              label=\"Display count\"\n              value={ this.state.countView }\n              onChange={ this.onDisplayCountSelect }\n              options={[\n                { value: 5 },\n                { value: 10 },\n                { value: 20 },\n                { value: 50 },\n                { value: 100 },\n              ]}\n            />\n          </div>\n\n        </div>\n\n        <div className=\"bg-white mt-6\">\n          {\n            this.state.geneView.map(({ accession, geneInfo }) => (\n\n              <div\n                className=\"group flex px-6 py-4 odd:bg-gray-100 hover:bg-yellow-100\"\n                key={ accession }\n                onDoubleClick={ () => this.selectGene(accession) }\n              >\n                <div className=\"w-full\">\n                  <div className=\"font-bold\">{ accession }</div>\n                  {\n                    geneInfo.size === 0\n                      ? 'No information available for this gene.'\n                      : (\n                        <div className=\"flex mt-1 ml-4\">\n\n                          <ul className=\"text-yellow-700\">\n                            {\n                              [ ...geneInfo.keys() ].map(key => (\n                                <li key={ key } className=\"mt-1\">{ key }</li>\n                              ))\n                            }\n                          </ul>\n\n                          <ul className=\"ml-5\">\n                            {\n                              [ ...geneInfo.values() ].map((value, index) => (\n                                <li key={ index } className=\"mt-1\">{ value }</li>\n                              ))\n                            }\n                          </ul>\n\n                        </div>\n                      )\n                  }\n                </div>\n\n                <AppButton>\n                  <AppIcon\n                    className=\"ml-4 w-6 h-6 text-gray-500 invisible group-hover:visible\"\n                    file=\"hero-icons\"\n                    id=\"eye\"\n                  />\n                </AppButton>\n\n              </div>\n\n            ))\n          }\n        </div>\n\n        {\n          this.state.selectedGene &&\n          <AppModal\n            className=\"flex flex-col w-full h-full md:w-5/6 md:h-5/6 lg:w-3/4 2xl:w-1/2\"\n            title={ this.state.selectedGene }\n            showModal={ this.state.selectedGene }\n            hideModal={ () => this.selectGene() }\n          >\n            <GeneDetails geneCounts={ this.state.selectedGeneCounts } />\n          </AppModal>\n        }\n\n      </div>\n    );\n  }\n}\n","/**\n * Sanitizes special characters used in regular expressions, so these can be\n * used as a literal search input.\n *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n *\n * @param {string} string input string to be escaped\n */\nexport function escapeRegExp(string) {\n  return string.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","import React, { Component } from 'react';\n\nexport default class ToolsHome extends Component {\n  render() {\n    return (\n      <div>\n        ToolsHome works!\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport GeneBrowser from './pages/GeneBrowser';\nimport ToolsHome from './pages/ToolsHome';\n\n\nclass ToolsRoutes extends Component {\n  render () {\n    return (\n      <Switch>\n        <Route exact path={ '/tools' } component={ ToolsHome } />\n        <Route path={ '/tools/gene-browser' } component={ GeneBrowser } />\n      </Switch>\n    );\n  }\n}\n\nexport default ToolsRoutes;","import React  from 'react';\nimport Routes from './ToolsRoutes';\n\nexport default class DataHome extends React.Component {\n\n  render () {\n    return (\n      <Routes />\n    );\n  }\n}","import React             from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport DataHome  from './modules/data/DataHome';\nimport PlotsHome from './modules/plotly/PlotsHome';\nimport ToolsModule from './modules/tools/ToolsModule';\n\nexport default function AppRoutes() {\n  return (\n    <Switch>\n      <Route path=\"/plots\" component={ PlotsHome } />\n      <Route path=\"/data\"  component={ DataHome } />\n      <Route path=\"/tools\" component={ ToolsModule } />\n    </Switch>\n  );\n}\n","import React from 'react';\n\nimport AppRipple from './AppRipple';\n\n\n/**\n * @typedef  {Object} AppFileProps Properties object for the AppFile component.\n * @property {string} className css classes to apply in the root component\n *\n * @param {AppFileProps} props component properties\n */\nexport default function AppFile (props) {\n\n  const { className, children, ...inputProps } = props;\n\n  return (\n    <label className={\n      `relative overflow-hidden\n       flex items-center cursor-pointer\n       rounded focus:outline-none font-medium uppercase\n       ${className}`\n    }>\n      <input className=\"hidden\" type=\"file\" { ...inputProps } />\n\n      { children }\n\n      <AppRipple />\n\n    </label>\n  );\n}","\nimport React from 'react';\n\n\nexport default class AppSwitch extends React.Component {\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      switchValue: props.checked,\n    };\n  }\n  // const { className, label, ...inputProps } = props;\n\n  toggleSwitch = () => {\n\n    this.setState(state => {\n      this.props.onChange(!state.switchValue);\n      return { switchValue: !state.switchValue };\n    });\n  }\n\n  render () {\n    return (\n      <div\n        className={ `relative flex items-center ${this.props.className}` }\n        onClick={ this.toggleSwitch }\n      >\n\n        <div\n          className={\n            `relative flex flex-shrink-0 my-3 h-6 w-12\n             border-2 border-transparent cursor-pointer rounded-full\n             focus:outline-none focus:shadow-outline\n             transition-colors duration-200 ease-in-out\n             ${this.state.switchValue ? 'bg-green-800' : 'bg-gray-300' }`}\n        >\n          <span\n            className={\n              `w-1/2 bg-white rounded-full\n              transition duration-200 ease-in-out\n              transform ${this.state.switchValue ? 'translate-x-full' : 'translate-x-0' }`\n            }\n          />\n        </div>\n\n        <label\n          htmlFor={ this.props.label }\n          className={\n            `ml-2 text-sm\n           ${ this.state.focus ? 'text-blue-500' : this.state.hover ? 'text-gray-800' : 'text-gray-600' }`\n          }\n        >\n          { this.props.label }\n        </label>\n      </div>\n    );\n  }\n}","import React from 'react';\n\n\nexport default class AppSpinner extends React.Component {\n\n  render () {\n    return (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 24 24\"\n        className={ `animate-spin ${this.props.className}` }\n        fill=\"none\"\n      >\n        <circle\n          className=\"opacity-25\"\n          cx=\"12\" cy=\"12\" r=\"10\"\n          stroke=\"currentColor\" strokeWidth=\"4\"\n        />\n        <path\n          className=\"opacity-75\"\n          fill=\"currentColor\"\n          d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\n             m2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n        />\n      </svg>\n    );\n  }\n}","export async function readFile (file) {\n\n  const reader = new FileReader();\n  reader.readAsText(file);\n\n  return new Promise((resolve, reject) => {\n\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = () => reject(reader.error);\n\n  });\n}\n\n/**\n * Parse a tabular file to its in-memory object representation.\n *\n * @typedef  {Object}  ReadTableOptions Options object for the expression table parser\n * @property {string?}  headerSeparator delimiter for multi-header support\n * @property {string}    fieldSeparator delimiter for each column field\n * @property {number}     rowNameColumn column used for row names (values must be unique)\n *\n * @param {string} table table as a single string\n * @param {ReadTableOptions} options parser options\n */\nexport function readTable (table, options) {\n\n  const lines = table.split(/\\r?\\n|\\r/);\n\n  // Extract the table header (first element of lines is removed)\n  const header = lines\n    .shift()\n    .split(options.fieldSeparator)\n    .reduce((array, field, index) => {\n      if (index === options.rowNameColumn) return array;\n      if (options.headerSeparator) field = field.split(options.headerSeparator);\n      array.push(field);\n      return array;\n    }, []);\n\n  // Parse each line as an object of unique row names\n  const rows = lines.reduce((acc, line) => {\n\n    if (!line) return acc;\n\n    const values = line.split(options.fieldSeparator);\n    const key = values.splice(options.rowNameColumn, 1);\n    return Object.assign(acc, { [key]: values });\n\n  }, {});\n\n  return {\n    header,\n    rows,\n  };\n}\n","import { makeAutoObservable } from 'mobx';\nimport { dataTable } from '@/store/data-store';\n\nconst PRELOAD_DATA = process.env.PRELOAD_DATA;\nconst PRELOAD_INFO = process.env.PRELOAD_INFO;\nconst PRELOAD_IMAGE = process.env.PRELOAD_IMAGE;\nconst PRELOAD_SETTINGS = process.env.PRELOAD_SETTINGS;\n\nclass Settings {\n\n  _PRELOADED = {\n    data: '',\n    info: '',\n    image: '',\n    settings: '',\n  };\n\n  _tableSettings = {\n    'unit': '',\n    'expression_field_sep': '\\t',\n    'expression_header_sep': '*',\n    'info_field_sep': '\\t'\n  };\n\n  _isPreloading = false;\n\n  constructor (preloaded) {\n    Object.assign(this._PRELOADED, preloaded);\n    makeAutoObservable(this);\n  }\n\n  get preloaded () {\n    return this._PRELOADED;\n  }\n\n  get isPreloading () {\n    return this.preloaded.data && !dataTable.hasData;\n  }\n  \n  get tableSettings () {\n    return this._tableSettings;\n  }\n\n  loadTableSettings (tableSettings) {\n    Object.assign(this._tableSettings, tableSettings);\n  }\n\n}\n\nexport const settings = new Settings({\n  data: PRELOAD_DATA,\n  info: PRELOAD_INFO,\n  image: PRELOAD_IMAGE,\n  settings: PRELOAD_SETTINGS,\n});\n","import React from 'react';\n\nimport AppButton  from '@components/AppButton';\nimport AppFile    from '@components/AppFile';\nimport AppIcon    from '@components/AppIcon';\nimport AppSwitch  from '@components/AppSwitch';\nimport AppSelect  from '@components/AppSelect';\nimport AppSpinner from '@components/AppSpinner';\nimport AppText    from '@components/AppText';\n\nimport { readFile, readTable } from '@/utils/parser';\nimport { dataTable } from '@/store/data-store';\nimport { plotStore } from '@/store/plot-store';\nimport { settings } from '@/store/settings';\n\n/**\n * Render a single group as a JSX.Element\n *\n * @typedef  {Object} GroupViewProps Properties object for the GroupVIew component.\n * @property {string} className css classes to apply in the root element\n *\n * @param {GroupViewProps} props component props\n */\nexport default class GroupView extends React.Component {\n\n  constructor () {\n\n    super();\n\n    this.state = {\n      groupName: '',\n      countUnit: 'raw',\n      // Sample\n      sampleName: '',\n      xTickValue: 0,\n      // Replicate\n      accessionColumn: 0,\n      countColumn: 0,\n      header: true,\n      separator: '\\t',\n      // Component\n      cancel: false,\n      loading: false,\n    };\n\n  }\n\n  /* EVENT HANDLERS */\n\n  /**\n   * Submit new or updated group to the store. Navigate to DataView page.\n   * @param {React.FormEvent<HTMLInputElement>} event\n   */\n  onUploadTablesClick = async (event) => {\n\n    event.preventDefault();\n\n    this.setState({ loading: true });\n\n    // set the countUnit in the plotStore\n    plotStore.loadCountUnit(this.state.countUnit);\n\n    settings.loadTableSettings({\n      unit: this.state.countUnit\n    });\n\n    const files = [ ...event.currentTarget.files ];\n\n    for (const file of files) {\n\n      const result = await readFile(file);\n\n      const table = readTable(result, {\n        fieldSeparator: this.state.separator,\n        rowNameColumn: this.state.accessionColumn,\n      });\n\n      // If the store is empty, load the dataframe with the first table\n      if (dataTable.colNames.length === 0) {\n\n        const rows = Object\n          .entries(table.rows)\n          .reduce((obj, [ rowName, rowCells]) => Object.assign(obj, {\n            [rowName]: [ rowCells[this.state.countColumn-1] ]\n          }), {});\n\n        dataTable.loadFromObject({\n          header: [ `${this.state.groupName}*${this.state.sampleName}*${file.name}` ],\n          rows,\n        }, { multiHeader: '*'});\n\n        continue;\n      }\n\n      // Add table as a dataframe column\n      dataTable.addColumn(\n        `${this.state.groupName}*${this.state.sampleName}*${file.name}`,\n        Object\n          .entries(table.rows)\n          .map(([ rowName, rowCells]) => [\n            rowName,\n            rowCells[this.state.countColumn-1]\n          ])\n      );\n\n    }\n\n    this.setState({ loading: false });\n    this.props.onSave();\n  }\n\n  /* ACTION HANDLERS */\n\n  /**\n   * Updates the state with the header property value.\n   * @param {boolean} value switch on/off state\n   */\n  onHeaderSwitchClick = (value) => this.setState({\n    header: value\n  });\n\n  /**\n   * Cancel the current form submission and execute the onCancel callback.\n   */\n  onCancelButtonClick = () => {\n    this.setState({ cancel: true });\n    this.props.onCancel();\n  }\n\n  render () {\n\n    return (\n      <form className=\"w-full px-6 flex-auto my-4 text-gray-600 text-lg leading-relaxed\">\n\n        {/* GROUP */}\n        <div className=\"flex flex-col md:flex-row\" >\n\n          {/* GROUP NAME */}\n          <AppText\n            className=\"w-full md:w-1/2\"\n            label=\"Group name\"\n            value={ this.state.groupName }\n            onChange={ (event) => this.setState({ groupName: event.target.value }) }\n          />\n\n          {/* COUNT UNIT */}\n          <AppSelect\n            className=\"w-full md:w-1/2 md:ml-2\"\n            label=\"Count unit\"\n            value={ this.state.countUnit }\n            options={[\n              { label: 'Raw',  value: 'raw' },\n              { label: 'RPKM', value: 'rpkm' },\n              { label: 'TPM',  value: 'tpm' }\n            ]}\n            onChange={ (event) => this.setState({ countUnit: event.target.value }) }\n          />\n\n        </div>\n\n\n        {/* SAMPLE */}\n        <div className=\"flex flex-col md:flex-row mt-4\">\n\n          {/* NAME */}\n          <AppText\n            className=\"w-full md:w-1/2\"\n            placeholder=\"e.g. DAS-1\"\n            label=\"Sample name\"\n            value={ this.state.sampleName }\n            onChange={ (event) => this.setState({ sampleName: event.target.value }) }\n          />\n\n          {/* X-VALUE */}\n          <AppText\n            className=\"w-full md:w-1/2 md:ml-2\"\n            placeholder=\"1..N\"\n            label=\"Sample X-value\"\n            value={ this.state.xTickValue }\n            onChange={ (event) => this.setState({ xTickValue: event.target.value }) }\n          />\n\n        </div>\n\n\n        {/* REPLICATES */}\n        <div className=\"flex flex-col justify-center md:flex-row mt-4\" >\n\n          {/* COLUMN separator */}\n          <AppSelect\n            className=\"w-full md:w-1/3\"\n            placeholder=\"1..N\"\n            label=\"separator\"\n            value={ this.state.separator }\n            options={[\n              { label: 'TAB',  value: '\\t' },\n              { label: 'CSV',  value: ','  }\n            ]} onChange={ (event) => this.setState({ separator: event.target.value }) }\n          />\n\n          {/* GENE ID COLUMN */}\n          <AppText\n            className=\"w-full md:w-1/3 md:ml-2\"\n            placeholder=\"1..N\"\n            label=\"Gene ID column\"\n            value={ this.state.accessionColumn }\n            onChange={ (event) => this.setState({ accessionColumn: event.target.value }) }\n          />\n\n          {/* COUNT COLUMN */}\n          <AppText\n            className=\"w-full md:w-1/3 md:ml-2\"\n            placeholder=\"1..N\"\n            label=\"Expression count column\"\n            value={ this.state.countColumn }\n            onChange={ (event) => this.setState({ countColumn: event.target.value }) }\n          />\n\n        </div>\n\n        <div className=\"flex flex-col justfify-center items-center mt-4 md:flex-row\" >\n\n          {/* HEADER TOGGLE */}\n          <AppSwitch\n            className=\"w-full md:w-1/4 md:ml-2\"\n            label=\"Header Row\"\n            checked={ this.state.header }\n            onChange={ this.onHeaderSwitchClick }\n          />\n\n        </div>\n\n\n        {/* FORM ACTIONS */}\n\n        <div className=\"flex mt-6 mx-1\">\n\n          <AppFile\n            className=\"flex justify-center items-center py-2 px-5 primary-blue\"\n            multiple\n            onChange={ this.onUploadTablesClick }\n          >\n            {\n              this.state.loading\n                ? <AppSpinner className=\"mr-3 h-6 w-6 text-white\" />\n                : <AppIcon file=\"hero-icons\" id=\"document\" className=\"w-6 h-6 mr-3\"/>\n            }\n            {\n              this.state.loading\n                ? 'Uploading'\n                : 'Upload Tables'\n            }\n          </AppFile>\n\n          <AppButton\n            className=\"ml-3 py-2 px-5 tertiary-pink\"\n            type=\"button\"\n            value=\"Cancel\"\n            onClick={ this.onCancelButtonClick }\n          >\n              Cancel\n          </AppButton>\n\n        </div>\n      </form>\n    );\n  }\n\n}","import React from 'react';\n\nimport AppButton  from '@components/AppButton';\nimport AppIcon    from '@components/AppIcon';\nimport AppFile    from '@components/AppFile';\nimport AppSelect  from '@components/AppSelect';\nimport AppSpinner from '@components/AppSpinner';\nimport AppText    from '@components/AppText';\n\nimport { readTable } from '@/utils/parser';\nimport { dataTable } from '@/store/data-store';\n\nimport { plotStore } from '@/store/plot-store';\nimport { settings }  from '@/store/settings';\n\nexport default class TableForm extends React.Component {\n\n  constructor () {\n    super();\n    this.state = {\n      countUnit: 'raw',\n      headerSeparator: '*',\n      fieldSeparator: ',',\n      //\n      cancel: false,\n      loading: false,\n    };\n  }\n\n  /* INPUT HANDLERS */\n\n  onCountUnitSelect = (event) => {\n    this.setState({ countUnit: event.target.value });\n  }\n\n  onFieldSeparatorChange = (event) => {\n    this.setState({ fieldSeparator: event.target.value });\n  }\n\n  onHeaderSeparatorChange = (event) => {\n    this.setState({ headerSeparator: event.target.value });\n  }\n\n  /* ACTION HANDLERS */\n\n  /**\n   * Submit new or updated group to the store. Navigate to DataView page.\n   * @param {React.FormEvent<HTMLInputElement>} event\n   */\n  onFormSubmit = async (event) => {\n\n    event.preventDefault();\n\n    this.setState({ loading: true });\n\n    plotStore.loadCountUnit(this.state.countUnit);\n    settings.loadTableSettings({\n      'unit': this.state.countUnit,\n      'expression_field_sep': this.state.fieldSeparator,\n      'expression_header_sep': '*',\n    });\n\n    const file = event.target.files[0];\n\n    // Accept tabular types only\n    const validTypes = [\n      'text/tab-separated-values',\n      'text/csv',\n      'text/plain',\n    ];\n\n    if (!file || !validTypes.includes(file.type)) {\n      console.error(`Invalid file type: ${file.type}`);\n      this.setState({ loading: false });\n      return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onload = () => {\n\n      // Parse the input file as a table\n      const table = readTable(reader.result, {\n        fieldSeparator: this.state.fieldSeparator,\n        rowNameColumn: 0,\n      });\n\n      // Load the store from the parsed table\n      dataTable.loadFromObject(table, {\n        multiHeader: this.state.headerSeparator,\n      });\n\n    };\n\n    reader.onloadend = () => {\n      this.setState({ loading: false });\n      this.props.onSave();\n    };\n\n    reader.readAsText(file);\n\n  }\n\n  onCancelButtonClick = () => {\n    this.setState({ cancel: true });\n    this.props.onCancel();\n  }\n\n  render () {\n    return (\n      <form className=\"w-full px-6 flex-auto my-4 text-gray-600 text-lg leading-relaxed\">\n\n        <AppSelect\n          className=\"w-full\"\n          label=\"Count unit\"\n          value={ this.state.countUnit }\n          options={[\n            { label: 'Raw',  value: 'raw' },\n            { label: 'RPKM', value: 'rpkm' },\n            { label: 'TPM',  value: 'tpm' }\n          ]}\n          onChange={ this.onCountUnitSelect }\n        />\n\n        <AppText\n          className=\"w-full\"\n          label=\"Header separator\"\n          value={ this.state.headerSeparator }\n          onChange={ this.onHeaderSeparatorChange }\n        />\n\n        <AppSelect\n          className=\"w-full\"\n          placeholder=\"1..N\"\n          label=\"Field separator\"\n          value={ this.state.separator }\n          options={[\n            { label: 'CSV',  value: ','  },\n            { label: 'TAB',  value: '\\t' },\n          ]}\n          onChange={ this.onFieldSeparatorChange }\n        />\n\n        {/* FORM ACTIONS */}\n\n        <div className=\"flex mt-6 mx-1\">\n\n          <AppFile\n            className=\"flex justify-center items-center py-2 px-5 primary-blue\"\n            onChange={ this.onFormSubmit }\n          >\n            {\n              this.state.loading\n                ? <AppSpinner className=\"mr-3 h-6 w-6 text-white\" />\n                : <AppIcon file=\"hero-icons\" id=\"document\" className=\"w-6 h-6 mr-3\"/>\n            }\n            {\n              this.state.loading\n                ? 'Uploading'\n                : 'Upload Table'\n            }\n          </AppFile>\n\n          <AppButton\n            className=\"ml-3 py-2 px-5 tertiary-pink\"\n            type=\"button\"\n            value=\"Cancel\"\n            onClick={ this.onCancelButtonClick }\n          >\n              Cancel\n          </AppButton>\n        </div>\n\n      </form>\n    );\n  }\n}","import React from 'react';\n\nimport AppButton  from '@components/AppButton';\nimport AppIcon    from '@components/AppIcon';\nimport AppFile    from '@components/AppFile';\nimport AppSelect  from '@components/AppSelect';\nimport AppSpinner from '@components/AppSpinner';\n\nimport { readTable } from '@/utils/parser';\nimport { infoTable } from '@/store/data-store';\nimport { settings }  from '@/store/settings';\nexport default class InfoForm extends React.Component {\n\n  constructor () {\n    super();\n    this.state = {\n      fieldSeparator: ',',\n      //\n      cancel: false,\n      loading: false,\n    };\n  }\n\n  /* INPUT HANDLERS */\n\n  onFieldSeparatorChange = (event) => {\n    this.setState({ fieldSeparator: event.target.value });\n  }\n  /* ACTION HANDLERS */\n\n  /**\n   * Submit new or updated group to the store. Navigate to DataView page.\n   * @param {React.FormEvent<HTMLInputElement>} event\n   */\n  onFormSubmit = async (event) => {\n\n    event.preventDefault();\n\n    this.setState({ loading: true });\n\n    settings.loadTableSettings({\n      'info_field_sep': this.state.fieldSeparator\n    });\n\n    const file = event.target.files[0];\n\n    // Accept tabular types only\n    const validTypes = [\n      'text/tab-separated-values',\n      'text/csv',\n      'text/plain',\n    ];\n\n    if (!file || !validTypes.includes(file.type)) {\n      console.error(`Invalid file type: ${file.type}`);\n      this.setState({ loading: false });\n      return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onload = () => {\n\n      // Parse the input file as a table\n      const table = readTable(reader.result, {\n        fieldSeparator: this.state.fieldSeparator,\n        rowNameColumn: 0,\n      });\n\n      // Load the store from the parsed table\n      infoTable.loadFromObject(table);\n\n    };\n\n    reader.onloadend = () => {\n      this.setState({ loading: false });\n      this.props.onSave();\n    };\n\n    reader.readAsText(file);\n  }\n\n  onCancelButtonClick = () => {\n    this.setState({ cancel: true });\n    this.props.onCancel();\n  }\n\n  render () {\n    return (\n      <form className=\"w-full px-6 flex-auto my-4 text-gray-600 text-lg leading-relaxed\">\n\n        <AppSelect\n          className=\"w-full\"\n          placeholder=\"1..N\"\n          label=\"Field separator\"\n          value={ this.state.separator }\n          options={[\n            { label: 'CSV',  value: ','  },\n            { label: 'TAB',  value: '\\t' },\n          ]}\n          onChange={ this.onFieldSeparatorChange }\n        />\n\n        {/* FORM ACTIONS */}\n\n        <div className=\"flex mt-6 mx-1\">\n\n          <AppFile\n            className=\"flex justify-center items-center py-2 px-5 primary-blue\"\n            onChange={ this.onFormSubmit }\n          >\n            {\n              this.state.loading\n                ? <AppSpinner className=\"mr-3 h-6 w-6 text-white\" />\n                : <AppIcon file=\"hero-icons\" id=\"document\" className=\"w-6 h-6 mr-3\"/>\n            }\n            {\n              this.state.loading\n                ? 'Uploading'\n                : 'Upload Table'\n            }\n          </AppFile>\n\n          <AppButton\n            className=\"ml-3 py-2 px-5 tertiary-pink\"\n            type=\"button\"\n            value=\"Cancel\"\n            onClick={ this.onCancelButtonClick }\n          >\n              Cancel\n          </AppButton>\n        </div>\n\n      </form>\n    );\n  }\n}","import React from 'react';\n\nimport AppText from './AppText';\n\nexport default class AppDatalist extends React.Component {\n\n  constructor () {\n\n    super();\n\n    this.state = {\n      focus: false,\n    };\n\n    this.dataListContainerRef = null;\n  }\n\n  get containerWidth () {\n    return this.dataListContainerRef\n      ? this.dataListContainerRef.clientWidth\n      : null;\n  }\n\n  /**\n   *\n   * @param {HTMLDivElement} ref\n   */\n  setContainerRef = (ref) => {\n    this.dataListContainerRef = ref;\n  }\n\n  onListItemClick = (option) => {\n\n    this.setState({ focus: false });\n    this.props.onSelect(option);\n  }\n\n  onAppTextChange = (event) => {\n    this.props.onChange(event.target.value);\n  }\n\n  onAppTextFocus = (event) => {\n    this.setState({ focus: true });\n    this.props.onFocus(event);\n  }\n\n  onAppTextBlur = (event) => {\n    this.setState({ focus: false });\n  }\n\n  render () {\n\n    return (\n      <div\n        ref={ this.setContainerRef }\n        className={ `relative w-full ${this.props.className ?? ''}`}\n      >\n        <AppText\n          label={ this.props.label }\n          value={ this.props.value }\n          onFocus={ this.onAppTextFocus }\n          onBlur={ this.onAppTextBlur }\n          onChange={ this.onAppTextChange }\n        />\n\n        <ul\n          style={{ width: this.containerWidth }}\n          className={\n            `fixed flex flex-col justify-center items-center py-2 z-50\n             border bg-white transform -translate-y-6\n             ${ this.state.focus ? 'visible' : 'hidden' }`\n          }\n        >\n          {\n            this.props.options.length === 0\n              ?\n              <li>{ this.props.noItemsMessage ?? 'No matches found' }</li>\n              :\n              this.props.options.map((opt, index) => (\n                <li\n                  key={ `${opt}-${index}` }\n                  className=\"px-3 w-full cursor-default hover:bg-blue-700\n                             text-sm text-center text-gray-900 hover:text-white\"\n                  value={ opt }\n                  onMouseDown={ () => this.onListItemClick(opt) }\n                >\n                  { opt }\n                </li>\n              ))\n          }\n        </ul>\n\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\n\nimport AppButton   from '@components/AppButton';\nimport AppSwitch   from '@components/AppSwitch';\nimport AppDatalist from '@components/AppDatalist';\nimport AppIcon     from '@components/AppIcon';\nimport AppSelect   from '@components/AppSelect';\nimport AppSpinner  from '@components/AppSpinner';\nimport AppText     from '@components/AppText';\n\nimport {plotStore} from '@/store/plot-store';\n\nimport { dataTable , infoTable } from '@/store/data-store';\n\nexport default class PlotsForm extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      accessionIds: [ dataTable.rowNames[0] ?? '' ],\n      accessionIdsView: dataTable.rowNames.slice(0, 10),\n      colorBy: 'group',\n      plotTitle: '',\n      plotType: 'bars',\n      showlegend: true,\n      showCaption: infoTable.hasData,\n      //\n      loading: false,\n      validForm: true,\n    };\n  }\n\n  /* AUXILIARY */\n\n  searchAccessionIds = (accession) => {\n\n    const rowNames = dataTable.rowNames;\n\n    // Flag whether the current accession id is valid for submission\n    this.setState({ validForm: rowNames.includes(accession) });\n\n    // Update the search window with the accession matching ids\n    let accessionIdsView = [];\n\n    for (let i = 0; i < rowNames.length; i++) {\n\n      if (rowNames[i].includes(accession))\n        accessionIdsView.push(rowNames[i]);\n\n      if (accessionIdsView.length >= 10)\n        break;\n    }\n\n    this.setState({\n      accessionIdsView,\n    });\n  }\n\n  /* EVENT HANDLERS */\n\n  onAccessionDataListChange = (accession, index) => {\n\n    // Update the internal accession id with the new input value\n    this.setState(state => {\n\n      const accessionIds = state.accessionIds;\n      accessionIds[index] = accession;\n\n      return {\n        accessionIds,\n      };\n    });\n\n    // Update the search window with the new matching ids\n    this.searchAccessionIds(accession);\n  }\n\n  onAccessionDatalistIconClick = (action, index) => {\n\n    if (action === 'add') this.setState(state => ({\n      accessionIds: [ ...state.accessionIds, '' ],\n      validForm: false,\n    }));\n\n    else if (action === 'remove') this.setState(state => ({\n      accessionIds: state.accessionIds.filter((_, i) => i !== index)\n    }));\n\n  }\n\n  /**\n   * Submit a new plot to the store.\n   * @param {React.FormEvent<HTMLButtonElement>} event button click event\n   */\n  onPlotGeneButtonClick = (event) => {\n    event.preventDefault();\n    this.setState({ loading: true });\n    plotStore.addPlot(\n      this.state.accessionIds,{\n        showlegend:  this.state.showlegend,\n        showCaption: this.state.showCaption,\n        plotType:    this.state.plotType,\n        colorBy:     this.state.colorBy,\n        plotTitle:   this.state.plotTitle,\n      }\n    );\n    this.setState({ loading: false });\n    this.props.onCancel();\n  };\n\n\n  /**\n   * Update the plot title state.\n   * @param {React.FormEvent<HTMLInputElement>} event text input change event\n   */\n  onPlotTitleChange = (event) => {\n    this.setState({ plotTitle: event.target.value });\n  }\n\n  onSelectPlotTypeChange = (event) => {\n    this.setState({ plotType: event.target.value });\n  }\n\n  onSelectColorByChange = (event) => {\n    this.setState({ colorBy: event.target.value });\n  }\n\n  render() {\n    return (\n      <form\n        className=\"overflow-y-auto w-full max-h-3xl px-6 py-4 flex-auto\n                   text-gray-600 text-lg leading-relaxed\"\n      >\n        <AppText\n          label=\"Plot title\"\n          value={ this.state.groupName }\n          onChange={ this.onPlotTitleChange }\n        />\n\n        <AppSelect\n          className=\"mt-4\"\n          label=\"Plot type\"\n          value={ this.state.plotType }\n          options={[\n            { label: 'Bars',  value: 'bars' },\n            { label: 'Individual Curves', value: 'individualCurves' },\n            { label: 'Stacked Curves', value: 'stackedCurves' },\n\n          ]}\n          onChange={ this.onSelectPlotTypeChange }\n        />\n\n        {\n          this.state.plotType === 'stackedCurves' &&\n          <AppSelect\n            className=\"mt-4\"\n            label=\"Color by\"\n            value={ this.state.colorBy }\n            options={[\n              { label: 'group', value: 'group' },\n              { label: 'gene',  value: 'gene', disabled: this.state.accessionIds.length === 1 },\n            ]}\n            onChange={ this.onSelectColorByChange }\n          />\n        }\n\n        {\n          this.state.accessionIds.map((accession, index) => {\n\n            const isLast = this.state.accessionIds.length === index+1;\n\n            return (\n              /**\n               * We need to use `index` as key, since `accession` will mutate\n               * each time the user changes the input, causing the element\n               * to re-render every time a key is pressed and losing focus.\n               */\n              <div\n                key={ index }\n                className=\"flex items-center mt-4\"\n              >\n                <AppDatalist\n                  label={ isLast ? 'Accession ID' : null }\n                  value={ this.state.accessionIds[index] }\n                  options={ this.state.accessionIdsView }\n                  onChange={ (accession) => this.onAccessionDataListChange(accession, index) }\n                  onSelect={ (accession) => this.onAccessionDataListChange(accession, index) }\n                  onFocus={ () => this.searchAccessionIds(accession) }\n                />\n\n                <AppIcon\n                  className={\n                    `ml-4 w-12 h-12 cursor-pointer\n                     ${ isLast ? 'text-green-700 mb-8' : 'text-pink-700'}`\n                  }\n                  file=\"hero-icons\"\n                  id={ isLast ? 'plus' : 'minus' }\n                  onClick={ () => this.onAccessionDatalistIconClick(\n                    isLast ? 'add' : 'remove', index\n                  ) }\n                />\n\n              </div>\n            );\n          })\n        }\n        <div className=\"mt-4 w-full md:flex\">\n\n          <AppSwitch\n            className=\"w-1/2\"\n            onChange={ (value) => this.setState({ showlegend: value }) }\n            checked={ this.state.showlegend }\n            label=\"Legend\"\n          />\n          {\n            infoTable.hasData &&\n            <AppSwitch\n              className=\"w-1/2 md:ml-2\"\n              onChange={ (value) => this.setState({ showCaption: value }) }\n              checked={ this.state.showCaption }\n              label=\"Caption\"\n            />\n          }\n\n        </div>\n\n        <div className=\"mt-8 flex justify-start w-full\">\n\n          <AppButton\n            className={\n              `px-5 py-2 shadow-outer text-white\n              ${ this.state.validForm ?'bg-blue-700' : 'bg-gray-700 cursor-not-allowed'}`\n            }\n            type=\"Submit\"\n            disabled={ !this.state.validForm }\n            onClick={ this.onPlotGeneButtonClick }\n          >\n            {\n              this.state.loading\n                ? <AppSpinner className=\"mr-2 h-6 w-6 text-white\" />\n                : <AppIcon file=\"hero-icons\" id=\"chart-square-bar\" className=\"w-6 h-6 mr-2\"/>\n            }\n            {\n              this.state.loading\n                ? 'Plotting'\n                : 'Plot Gene'\n            }\n          </AppButton>\n\n          <AppButton\n            className=\"ml-3 py-2 px-5 tertiary-pink\"\n            type=\"Button\"\n            value=\"Cancel\"\n            onClick={ this.props.onCancel }\n          >\n          Cancel\n          </AppButton>\n\n        </div>\n\n      </form>\n    );\n  }\n}","import React    from 'react';\nimport { Link } from 'react-router-dom';\n\nimport AppButton from '@components/AppButton';\nimport AppIcon   from '@components/AppIcon';\n\n\nexport default class Navbar extends React.Component {\n\n  render () {\n    return (\n      <header className=\"flex justify-between items-center w-full text-gray-700\">\n\n        {/* TOGGLE */}\n        <AppButton\n          className=\"md:hidden p-1 cursor-pointer rounded-full\"\n          type=\"button\"\n          onClick={ this.props.onToggle }\n        >\n          <AppIcon\n            className=\"w-6 h-6\"\n            file=\"hero-icons\"\n            id={ this.props.show ? 'close' : 'menu' }\n          />\n        </AppButton>\n\n        {/* TITLE */}\n        <h1 className=\"flex justify-center p-1 w-full\">\n          <Link\n            className=\"font-bold text-center text-xl\"\n            to=\"/\"\n          >\n            { this.props.brand }\n          </Link>\n        </h1>\n\n      </header>\n    );\n  }\n}","import React, { Component } from 'react';\n\nexport default class AppAnchor extends Component {\n  render() {\n    return (\n      <a\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        { ...this.props }\n      >\n        { this.props.children }\n      </a>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport AppAnchor from '@components/AppAnchor';\nimport AppButton from '@components/AppButton';\nimport AppFile   from '@components/AppFile';\nimport AppIcon   from '@components/AppIcon';\n\n\nexport class NavLink extends Component {\n\n  render () {\n    return (\n      <Link\n        aria-disabled={ this.props.disabled }\n        className= {\n          `flex items-center py-2 text-gray-800 text-base capitalize font-bold\n           ${this.props.disabled ? 'pointer-events-none opacity-50' : 'hover:text-blue-600' }`\n        }\n        to={ this.props.to }\n      >\n        { this.props.icon && <AppIcon file=\"hero-icons\" id={ this.props.icon } className=\"w-6 h-6 mr-2\" /> }\n        { this.props.name }\n      </Link>\n    );\n  }\n\n}\n\nexport class NavMenu extends Component {\n\n  constructor (props) {\n    super(props);\n    const menuType = {\n      anchor: AppAnchor,\n      button: AppButton,\n      file: AppFile,\n    };\n    this.MenuComponent = menuType[props.component];\n  }\n\n  render () {\n    return (\n      <li key={`${this.props.name}`} >\n        <this.MenuComponent\n          className= {\n            `flex items-center py-2 cursor-pointer\n             text-gray-800 text-base capitalize font-bold\n             ${this.props.disabled ? 'opacity-50 cursor-not-allowed' : 'hover:text-blue-600' }`\n          }\n\n          { ...this.props }\n        >\n          { this.props.icon && <AppIcon file=\"hero-icons\" id={ this.props.icon } className=\"w-6 h-6 mr-2\" /> }\n          { this.props.name }\n        </this.MenuComponent>\n      </li>\n    );\n  }\n\n}\n\nexport class NavGroup extends Component {\n\n  render() {\n    return (\n      <div\n        className={ `flex flex-col items-center ${this.props.className}` }\n      >\n        <Link\n          className=\"md:min-w-full font-bold text-lg uppercase text-gray-600\"\n          to={ this.props.to }\n        >\n          { this.props.title }\n        </Link>\n\n        <ul\n          className=\"flex flex-col items-center justify-center list-none\n                     md:min-w-full md:items-start md:ml-4\"\n        >\n          { this.props.children }\n        </ul>\n      </div>\n    );\n  }\n\n}\n","import XLSX from 'xlsx';\n// const XLSX = require('xlsx');\n\n\nexport async function importer(ab1, ab2) {\n// ( async () =>{\n  try {\n    const workbook_metadata = XLSX.read(new Uint8Array(ab1), {type:'array'});\n    console.log(workbook_metadata.SheetNames);\n    let worksheet_metadata = workbook_metadata.Sheets[workbook_metadata.SheetNames[0]];\n\n    const workbook_data = XLSX.read(new Uint8Array(ab2), {type:'array'});\n    console.log(workbook_data.SheetNames);\n    let worksheet_data = workbook_data.Sheets[workbook_data.SheetNames[0]];\n\n\n    // const workbook_data = XLSX.readFile('../assets/MOA2010-05_2_transcriptomics_microarrays_normalised.xlsx');\n    // let worksheet_data = workbook_data.Sheets[workbook_data.SheetNames[0]];\n    \n    let original_column_names = [];\n    let table = new Object();\n    let rows = new Object();\n    for (let row = 0; row < 42035; ++row){\n      let value = [];\n      let key;\n      for(let col = 0; col < 120; ++col) {\n        let cell_address = {c:col, r:row};\n        let cell_ref = XLSX.utils.encode_cell(cell_address);\n        if (row===0){\n          original_column_names.push(worksheet_data[cell_ref].v);\n        } else if (col === 1){\n          continue;\n        } else if (col === 0){\n          key = worksheet_data[cell_ref].v;\n        } else {\n          if (worksheet_data[cell_ref].v!=='null'){\n            value.push(worksheet_data[cell_ref].v);\n          } else {\n            break;\n          }\n          \n        }\n      }\n      if (value.length){\n        rows[key] = value;\n      }\n    }\n    // table.rows = rows;\n    console.log(rows['MICRO.15041.C1']);\n    // console.log(table['MICRO.15305.C1']);\n    // console.log(table['cSTA24A5TH']);\n    // console.log(table['BF_TUBSXXXX_0057H09_T3M.SCF']);\n\n\n    // const workbook_metadata = XLSX.readFile('../assets/MOA_Multiomics-Analysis_Phenodata-n-MIAPPE.xlsx');\n    // let worksheet_metadata = workbook_metadata.Sheets[workbook_metadata.SheetNames[0]];\n    let dict = new Map();\n    for(let row = 1; row < 907; ++row) {\n      let key_address = {c:2, r:row};\n      let key_ref = XLSX.utils.encode_cell(key_address);\n\n      // let group_address = {c:0, r:row};\n      // let group_ref = XLSX.utils.encode_cell(group_address);\n\n      let genotype_address = {c:5, r:row};\n      let genotype_ref = XLSX.utils.encode_cell(genotype_address);\n      let treatment_address = {c:6, r:row};\n      let treatment_ref = XLSX.utils.encode_cell(treatment_address);\n      let leaf_number_address = {c:8, r:row};\n      let leaf_number_ref = XLSX.utils.encode_cell(leaf_number_address);\n\n      // let plant_number_address = {c:7, r:row};\n      // let plant_number_ref = XLSX.utils.encode_cell(plant_number_address);\n\n      let leaf_position_address = {c:9, r:row};\n      let leaf_position_ref = XLSX.utils.encode_cell(leaf_position_address);\n\n      let date_treatment = {c:12, r:row};\n      let date_treatment_ref = XLSX.utils.encode_cell(date_treatment);\n\n      let date_observation = {c:13, r:row};\n      let date_observation_ref = XLSX.utils.encode_cell(date_observation);\n\n      let replicate_address = {c:14, r:row};\n      let replicate_ref = XLSX.utils.encode_cell(replicate_address);\n\n      // console.log(worksheet_metadata[date_ref].w);\n\n      // group: genotype_date:observation_treatment; sample:leaf_position_leaf_number; replicate->replicate\n      // worksheet_metadata[group_ref].v, \n      //one replicate : group 44 (1+3), group 56 (1+2!+3), group 57 (1+2!+3) !wrong replicate number\n      //group 59 (1+2+3), group 68 (1+2+3)\n      //group 53: (1+2+3) inconsistent leaf number-> no new replicate1\n      let date_difference = worksheet_metadata[date_observation_ref].v-worksheet_metadata[date_treatment_ref].v;\n      let group = [worksheet_metadata[genotype_ref].v, worksheet_metadata[treatment_ref].v, 'Leaf'+worksheet_metadata[leaf_number_ref].v, worksheet_metadata[leaf_position_ref].v].join('_');\n      // let sample = [date_difference].join('_');\n      if (date_difference<10){\n        date_difference = '0'+date_difference;\n\n      }\n      let value = [group, date_difference, worksheet_metadata[replicate_ref].v].join('*');\n      \n\n      dict.set(worksheet_metadata[key_ref].v, value);\n     \n    } \n    // let sliced_column_names = original_column_names.slice(2);\n    let new_column_names = original_column_names.slice(2).map(name => dict.get(name));\n    // table['header'] = new_column_names;\n\n    \n    let sorted_header = [...new_column_names].sort();\n    // console.log(sorted_header);\n    let sorted_rows = new Object();\n\n    for (let row_id of Object.keys(rows)){\n      // console.log(row_id);\n      let sorted_row = [];\n      for (let col of sorted_header){\n        let index = new_column_names.indexOf(col);\n        sorted_row.push(rows[row_id][index]);\n        // let original_col_name = sliced_column_names[index];\n        // console.log(col+';'+index+';'+rows[row_id][index]+';'+original_col_name);\n      }\n      sorted_rows[row_id] = sorted_row;\n      // break;\n\n    }\n    // console.log(sorted_rows);\n    table.rows = sorted_rows;\n    table['header'] = sorted_header;\n\n    // let dropped_columns = [];\n    // // let group_sample = sorted_header.map(col => );\n    // // console.log(group_sample);\n    // let counts = {};\n    // sorted_header.forEach( (col) =>\n    // {\n    //   let gs = col.slice(0, col.length-5);\n    //   counts[gs] = counts[gs]? counts[gs]+1 :1;\n    // }\n    // );\n    // // console.log(counts);\n    // sorted_header.forEach( (col) =>\n    // {\n    //   let gs = col.slice(0, col.length-5);\n    //   if (counts[gs]<3){\n    //     dropped_columns.push(col);\n    //   }\n    // }\n    // );\n    // console.log(dropped_columns);\n\n   \n\n    console.log(sorted_header);\n\n\n    return table;\n\n  } catch (e){\n    console.log(e);\n  }\n  \n}\n// )();","import React from 'react';\nimport { withRouter } from 'react-router';\n\nimport AppOverlay from '@components/AppOverlay';\nimport AppSpinner from '@components/AppSpinner';\nimport {\n  NavGroup,\n  NavMenu,\n  NavLink,\n} from './NavigationItem';\n\nimport { observer }  from 'mobx-react';\nimport { dataTable, infoTable } from '@/store/data-store';\nimport { plotStore } from '@/store/plot-store';\nimport { settings }  from '@/store/settings';\n\nimport JSZip from 'jszip';\nimport { readTable } from '@/utils/parser';\nimport { importer } from '@/utils/importer';\n\nimport { saveAs } from 'file-saver';\n\n@observer\nclass AppNavigation extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      exportUrl: null,\n      loading: false,\n    };\n  }\n\n  /* AUXILIARY */\n\n  /**\n   * Trigger a route change if the current location does not match the current route\n   * @param {string} route route name\n   */\n  changeRoute = (route) => {\n    if (this.props.location.pathname !== `/${route}`)\n      this.props.history.push(`/${route}`);\n  }\n\n  /* DATA MENU EVENTS */\n\n  onUploadReplicateTableClick = () => {\n    this.props.showGroupModal();\n    this.changeRoute('data');\n  }\n\n  onUploadExpressionTableClick = () => {\n    this.props.showTableModal();\n    this.changeRoute('data');\n  }\n\n  onUploadInfoMenuClick = () => {\n    this.props.showInfoModal();\n    this.changeRoute('data');\n  }\n\n  onExportDataMenuClick = async () => {\n\n    const data = {\n      expression: dataTable.dataFrametoString(settings.tableSettings.expression_field_sep),\n      info: infoTable.hasData ? infoTable.dataFrametoString(settings.tableSettings.info_field_sep) : null,\n    };\n\n    var zip = new JSZip();\n    zip.file('GXP_settings.json', JSON.stringify(settings.tableSettings,null,2));\n    zip.file('expression_table.txt', data.expression);\n    if (data.info)\n      zip.file('info_table.txt', data.info);\n    if (plotStore.image)\n      zip.file('image.png', plotStore.image.split('base64,')[1], {base64:true});\n\n    zip.generateAsync({type: 'blob'}).then(content => {\n      saveAs(content, 'GXP_data.zip');\n    });\n  }\n\n  onImportDataMenuClick = async (event) => {\n\n    this.setState({ loading: true });\n    // Get the file ref\n    const file = event.target.files.item(0);\n\n    const zip = new JSZip();\n\n    let zipImport = await zip.loadAsync(file);\n    if (!zipImport.files['GXP_settings.json']) {\n      this.setState({ loading: false });\n      throw new Error('The provided Import does not contain a GXP_settings.json file.');\n    }\n\n    if (!zipImport.files['expression_table.txt']) {\n      this.setState({ loading: false });\n      throw new Error('The provided Import does not contain an expression_table.txt file.');\n    }\n\n    let tableSettings = await zipImport.files['GXP_settings.json'].async('string');\n    settings.loadTableSettings(tableSettings);\n\n\n    let expressionTable = await zipImport.files['expression_table.txt'].async('string');\n    dataTable.loadFromObject(\n      readTable(expressionTable, {\n        fieldSeparator: settings.tableSettings.expression_field_sep,\n        rowNameColumn: 0,\n      }), {\n        multiHeader: settings.tableSettings.expression_header_sep\n      }\n    );\n\n    let infoFile = await zipImport.files['info_table.txt'];\n    if (infoFile) {\n      infoTable.loadFromObject(\n        readTable(await infoFile.async('string'), {\n          fieldSeparator: settings.tableSettings.info_field_sep,\n          rowNameColumn: 0,\n        })\n      );\n    }\n\n    let imageFile = await zipImport.files['image.png'];\n    if (imageFile) {\n      let imgsrc = await imageFile.async('base64');\n      imgsrc = 'data:image/png;base64, ' + imgsrc;\n      plotStore.loadImage(imgsrc);\n    }\n\n    this.setState({ loading: false });\n    this.changeRoute('data');\n  }\n\n\n  onImportPotatoDataMenuClick = async () => {\n    this.setState({ loading: true });\n    try {\n      console.log('fetch1:');\n\n      const url_metadata = 'https://fairdomhub.org/data_files/2765/content_blobs/7814/download';\n      const url_data = 'https://fairdomhub.org/data_files/2771/content_blobs/6908/download';\n      const proxy = 'https://cors-anywhere.herokuapp.com/';\n\n      const res1 = await fetch(proxy+url_metadata, {\n        method: 'GET'\n      });\n      const ab1 = await res1.arrayBuffer();\n\n      console.log('fetch2:');\n      const res2 = await fetch(proxy+url_data, {\n        method: 'GET'\n      });\n\n      const ab2 = await res2.arrayBuffer();\n      console.log('start conversion');\n      const table = await importer(ab1, ab2);\n      console.log('save to dataTable');\n      dataTable.loadFromObject(table, {multiHeader:'*'});\n      console.log('finish');\n\n    } catch (e){\n      console.log(e);\n    }\n    this.setState({ loading: false });\n  }\n\n  onClearDataMenuClick = () => {\n    this.changeRoute('data');\n    dataTable.clearData();\n  };\n\n  /* PLOT MENU EVENTS */\n\n  /**\n   * Clear the current plots.\n   */\n  onClearPlotsMenuClick = () => {\n    plotStore.clearPlots();\n    this.changeRoute('plots');\n  };\n\n  /**\n   * Clear the current legend image.\n   */\n  onClearImageMenuClick = () => {\n    plotStore.clearImage();\n    this.changeRoute('plots');\n  }\n\n  /**\n   * Convert the user image to an image URL and assign it in the store.\n   * @param {React.FormEvent<HTMLInputElement>} event file input event\n   */\n  onNewImageMenuClick = (event) => {\n\n    const file = event.target.files[0];\n    event.target.value = '';\n\n\n\n    const reader = new FileReader();\n    reader.onload = () => plotStore.loadImage(reader.result);\n    reader.onloadend = () => this.changeRoute('plots');\n    reader.onerror = (error) => console.error(error);\n    reader.readAsDataURL(file);\n\n    this.changeRoute('plots');\n  }\n\n  /**\n   * Show the Plots form modal.\n   */\n  onNewPlotMenuClick = () => {\n    this.changeRoute('plots');\n    this.props.showPlotsModal();\n  }\n\n  /* RENDER */\n\n  render () {\n    return (\n      <nav\n        className={\n          `absolute top-0 left-0 right-0 z-40 overflow-x-hidden\n           flex flex-col items-center justify-center\n           mt-20 py-5 shadow-outer rounded bg-white\n           md:relative md:flex md:flex-col\n           md:mt-0 md:items-stretch md:shadow-none\n           ${this.props.show ? 'visible' : 'hidden'}`\n\n        }\n        onClick={ this.props.onClick }\n      >\n        {/* LOADING SPINNER */}\n        {\n          (this.state.loading || settings.isPreloading) &&\n          <AppOverlay\n            className=\"flex flex-col justify-center items-center rounded-lg py-4 px-6\"\n            overlayClass=\"bg-gray-600\"\n          >\n            <AppSpinner className=\"mt-2 w-20 h-20 text-blue-700\" />\n            <span className=\"uppercase mt-4 font-semibold\">\n              {\n                this.state.loading\n                  ? 'Importing Data'\n                  : 'Preloading Data'\n              }\n            </span>\n          </AppOverlay>\n        }\n\n        {/* DATA */}\n        <NavGroup className=\"mt-0\" title=\"Data\" to=\"/data\" >\n\n          {\n            !settings.preloaded.data &&\n            <NavMenu\n              component=\"button\"\n              icon=\"table\"\n              name=\"Upload Replicate Table\"\n              onClick={ this.onUploadReplicateTableClick }\n            />\n          }\n\n          {\n            !settings.preloaded.data &&\n            <NavMenu\n              component=\"button\"\n              icon=\"table\"\n              name=\"Upload Expression Table\"\n              onClick={ this.onUploadExpressionTableClick }\n            />\n          }\n\n          {\n            !settings.preloaded.info &&\n            <NavMenu\n              component=\"button\"\n              icon=\"annotation\"\n              name=\"Upload Info Table\"\n              onClick={ this.onUploadInfoMenuClick }\n            />\n          }\n\n          <NavMenu\n            component=\"button\"\n            icon=\"download\"\n            name=\"Export Data\"\n            // download=\"GXP-data.json\"\n            // href={ this.state.exportUrl }\n            onClick={ this.onExportDataMenuClick }\n          />\n\n          {\n            !settings.preloaded.data &&\n            <NavMenu\n              component=\"file\"\n              icon=\"upload\"\n              name=\"Import Data\"\n              onChange={ this.onImportDataMenuClick }\n            />\n          }\n\n          {\n            !settings.preloaded.data &&\n            <NavMenu\n              component=\"button\"\n              icon=\"upload\"\n              name=\"Import Potato Virus Y\"\n              onClick={ this.onImportPotatoDataMenuClick }\n            />\n          }\n\n          {\n            !settings.preloaded.data &&\n            <NavMenu\n              component=\"button\"\n              icon=\"trash\"\n              name=\"Clear Data\"\n              onClick={ this.onClearDataMenuClick }\n            />\n          }\n\n        </NavGroup>\n\n        {/* PLOTS */}\n        <NavGroup className=\"mt-6\" title=\"Plots\" to=\"/plots\" >\n\n          <NavMenu\n            component=\"button\"\n            icon=\"chart-square-bar\"\n            name=\"New Plot\"\n            disabled={ !dataTable.hasData }\n            onClick={ this.onNewPlotMenuClick }\n          />\n\n          {\n            !settings.preloaded.image &&\n            <NavMenu\n              component=\"file\"\n              icon=\"photograph\"\n              accept=\"image/*\"\n              name=\"New Image\"\n              onChange={ this.onNewImageMenuClick }\n            />\n          }\n\n          <NavMenu\n            component=\"button\"\n            icon=\"trash\"\n            name=\"Clear Plots\"\n            disabled={ !plotStore.hasPlots }\n            onClick={ this.onClearPlotsMenuClick }\n          />\n\n          {\n            !settings.preloaded.image &&\n            <NavMenu\n              component=\"button\"\n              icon=\"trash\"\n              name=\"Clear Image\"\n              disabled={ !plotStore.hasImage }\n              onClick={ this.onClearImageMenuClick }\n            />\n          }\n\n        </NavGroup>\n\n        {/* TOOLS */}\n        <NavGroup className=\"mt-6\" title=\"Tools\" to=\"/\" >\n\n          <NavLink\n            to=\"/tools/gene-browser\"\n            icon=\"search\"\n            name=\"Gene Browser\"\n            disabled={ !dataTable.hasData }\n            onClick={ () => {} }\n          />\n\n        </NavGroup>\n\n        {/* DOCUMENTATION */}\n        <NavGroup className=\"mt-6\" title=\"Documentation\" to=\"/\" >\n\n          <NavMenu\n            component=\"anchor\"\n            icon=\"book\"\n            name=\"Guide\"\n            href=\"https://zendro-dev.gitbook.io/geneexpressionplots/documentation/user-manual\"\n          />\n\n          <NavMenu\n            component=\"anchor\"\n            icon=\"code\"\n            name=\"API\"\n            href=\"https://zendro-dev.gitbook.io/geneexpressionplots/documentation/api\"\n          />\n\n          <NavMenu\n            component=\"anchor\"\n            icon=\"document-duplicate\"\n            name=\"Example Data\"\n            href=\"https://github.com/usadellab/GeneExpressionPlots/tree/master/examples\"\n          />\n\n        </NavGroup>\n\n      </nav>\n    );\n  }\n}\n\nexport default withRouter(AppNavigation);","import React from 'react';\n\nimport AppModal   from '@components/AppModal2';\nimport GroupForm  from '@/modules/data/components/GroupForm';\nimport TableForm  from '@/modules/data/components/TableForm';\nimport InfoForm   from '@/modules/data/components/InfoForm';\nimport PlotsForm  from '@/modules/plotly/components/PlotsForm';\nimport TopBar     from './TopBar';\nimport Navigation from './Navigation';\n\n\nexport default class AppLayout extends React.Component {\n\n  constructor () {\n    super();\n    this.state = {\n      showNav: false,\n      showGroupModal: false,\n      showPlotsModal: false,\n      showTableModal: false,\n      showInfoModal: false\n    };\n  }\n\n  /* NAVIGATION */\n\n  onTopBarToggle = () => this.setState(state => ({ showNav: !state.showNav }))\n  onNavigationClick = () => this.setState({ showNav: false })\n\n  /* MODALS */\n\n  onShowGroupModal = () => this.setState({ showGroupModal: true });\n  onShowPlotsModal = () => this.setState({ showPlotsModal: true });\n  onShowTableModal = () => this.setState({ showTableModal: true });\n  onShowInfoModal  = () => this.setState({ showInfoModal: true })\n\n  onGroupFormModalHide = () => this.setState({ showGroupModal: false })\n  onGroupFormCancel = () => this.setState({ showGroupModal: false })\n  onGroupFormSave = () => this.setState({ showGroupModal: false })\n\n  onPlotFormModalHide = () => this.setState({ showPlotsModal: false })\n  onPlotFormCancel = () => this.setState({ showPlotsModal: false })\n\n  onTableFormModalHide = () => this.setState({ showTableModal: false })\n  onTableFormCancel = () => this.setState({ showTableModal: false })\n  onTableFormSave = () => this.setState({ showTableModal: false })\n\n  onInfoFormModalHide = () => this.setState({ showInfoModal: false })\n  onInfoFormCancel = () => this.setState({ showInfoModal: false })\n  onInfoFormSave = () => this.setState({ showInfoModal: false })\n\n\n  render () {\n    return (\n      <>\n        {/* NAVIGATION */}\n        <div\n          className=\"relative z-20 py-4 px-3 md:w-64\n                     shadow-xl bg-white md:overflow-y-auto\n                     md:fixed md:block md:inset-y-0 md:left-0\"\n        >\n\n          {/* NAVIGATION HEADER */}\n          <TopBar\n            onToggle={ this.onTopBarToggle }\n            show={ this.state.showNav }\n            brand=\"Gene Expression Plots\"\n          />\n\n          {/* COLLAPSIBLE NAVIGATION */}\n          <Navigation\n            show={ this.state.showNav }\n            showGroupModal={ this.onShowGroupModal }\n            showPlotsModal={ this.onShowPlotsModal }\n            showTableModal={ this.onShowTableModal }\n            showInfoModal={ this.onShowInfoModal }\n            onClick={ this.onNavigationClick }\n          />\n\n        </div>\n\n        {/* PAGE CONTENT */}\n        <div className=\"relative md:ml-64 flex flex-col min-h-screen bg-gray-300\">\n\n          {/* ROUTES */}\n          { this.props.children }\n\n          {/* DATA GROUP FORM */}\n          {\n            this.state.showGroupModal &&\n            <AppModal\n              title=\"Add Replicate Tables\"\n              showModal={ this.state.showGroupModal }\n              hideModal={ this.onGroupFormModalHide }\n            >\n              <GroupForm\n                onSave={ this.onGroupFormSave }\n                onCancel={ this.onGroupFormCancel }\n              />\n            </AppModal>\n          }\n\n          {/* DATA TABLE FORM */}\n          {\n            this.state.showTableModal &&\n            <AppModal\n              title=\"Add Expression Table\"\n              showModal={ this.state.showTableModal }\n              hideModal={ this.onTableFormModalHide }\n            >\n              <TableForm\n                onSave={ this.onTableFormSave }\n                onCancel={ this.onTableFormCancel }\n              />\n            </AppModal>\n          }\n\n          {/* INFO TABLE FORM */}\n          {\n            this.state.showInfoModal &&\n            <AppModal\n              title=\"Add Info Table\"\n              showModal={ this.state.showInfoModal }\n              hideModal={ this.onInfoFormModalHide }\n            >\n              <InfoForm\n                onSave={ this.onInfoFormSave }\n                onCancel={ this.onInfoFormCancel }\n              />\n            </AppModal>\n          }\n\n          {/* PLOTS FORM */}\n          {\n            this.state.showPlotsModal\n              ?\n              <AppModal\n                title=\"Add Plot\"\n                showModal={ this.state.showPlotsModal }\n                hideModal={ this.onPlotFormModalHide }\n              >\n                <PlotsForm\n                  onCancel={ this.onPlotFormCancel }\n                />\n              </AppModal>\n              :\n              null\n          }\n\n        </div>\n      </>\n    );\n  }\n}\n","/**\n * Asynchronously fetch a file from the /static assets folder.\n * @typedef  {Object} FetchResource\n * @property {string} type the body method that should be used to read the file\n *\n * @param {string} file path to static file\n * @param {RequestInit & FetchResource} options options object\n */\nexport async function fetchResource (file, options) {\n\n  const logError = (error) => console.error(error);\n\n  const response = await fetch(file, options).catch(logError);\n  if (!response || !response.ok) {\n    console.error(`Failed loading ${file}`);\n    return;\n  }\n\n  let payload = null;\n  try {\n    if      (options.type === 'blob') payload = await response.blob();\n    else if (options.type === 'json') payload = await response.json();\n    else if (options.type === 'text') payload = await response.text();\n    else if (options.type === 'url')  payload = await response.url;\n    else    throw new Error(`Unsupported read method for ${file}`);\n  } catch (error) {\n    console.error(error);\n  }\n\n  if (!payload)\n    console.error(`Failed reading ${file}`);\n\n  return payload;\n}\n","export default {\n      id: \"hero-icons-usage\",\n      viewBox: undefined,\n      url: __webpack_public_path__ + \"hero-icons.svg#hero-icons\",\n      toString: function () {\n        return this.url;\n      }\n    }","import React          from 'react';\nimport { HashRouter } from 'react-router-dom';\n\nimport AppRoutes from './App.routes';\nimport AppLayout from './layout/AppLayout';\n\nimport { fetchResource } from '@/utils/fetch';\nimport { readTable } from '@/utils/parser';\n\nimport { dataTable, infoTable } from '@/store/data-store';\nimport { plotStore } from './store/plot-store';\nimport { settings } from '@/store/settings';\n\nimport '@/assets/svg/hero-icons.svg';\n\n\nexport default class App extends React.Component {\n\n  async componentDidMount () {\n\n    if (settings.preloaded.settings) {\n      const settingsResponse = await fetchResource(settings.preloaded.settings, { type: 'json' });\n      if (settingsResponse) {\n        settings.loadTableSettings(settingsResponse);\n        plotStore.loadCountUnit(settings.tableSettings.unit);\n      }\n      else throw new Error('Please provide a GXP_settings.json file.');\n    }\n\n    if (settings.preloaded.data) {\n      const dataResponse = await fetchResource(settings.preloaded.data, { type: 'text' });\n      if (dataResponse) dataTable.loadFromObject(\n        readTable(dataResponse, {\n          fieldSeparator: settings.tableSettings.expression_field_sep,\n          rowNameColumn: 0,\n        }), {\n          multiHeader: settings.tableSettings.expression_header_sep\n        }\n      );\n    }\n\n    if (settings.preloaded.info) {\n      const infoResponse = await fetchResource(settings.preloaded.info, { type: 'text' });\n      if (infoResponse) infoTable.loadFromObject(\n        readTable(infoResponse, {\n          fieldSeparator: settings.tableSettings.info_field_sep,\n          rowNameColumn: 0,\n        })\n      );\n    }\n\n    if (settings.preloaded.image) {\n      const image = await fetchResource(settings.preloaded.image, { type: 'url' });\n      if (image) plotStore.loadImage(image);\n    }\n\n  }\n\n  render () {\n    return (\n      <HashRouter >\n        <AppLayout>\n          <AppRoutes />\n        </AppLayout>\n      </HashRouter>\n    );\n  }\n}\n","import React    from 'react';\nimport ReactDOM from 'react-dom';\nimport App      from './App';\n\nimport './css/tailwind.css';\nimport './css/plotly.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}